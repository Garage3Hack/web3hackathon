// Generated by @wagmi/cli@0.1.13 on 2023/3/18 at 22:47:53
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AdministerNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const administerNftABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BadgeNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const badgeNftABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'safeBatchMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MemberNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const memberNftABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CoreGovernor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const coreGovernorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'contract IVotes', type: 'address' },
      {
        name: '_timelock',
        internalType: 'contract TimelockController',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'eta', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldQuorumNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newQuorumNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'QuorumNumeratorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldTimelock',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newTimelock',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TimelockChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldVotingDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotingDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingDelaySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldVotingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingPeriodSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getActions',
    outputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'voter', internalType: 'address', type: 'address' },
    ],
    name: 'getReceipt',
    outputs: [
      {
        name: '',
        internalType: 'struct IGovernorCompatibilityBravo.Receipt',
        type: 'tuple',
        components: [
          { name: 'hasVoted', internalType: 'bool', type: 'bool' },
          { name: 'support', internalType: 'uint8', type: 'uint8' },
          { name: 'votes', internalType: 'uint96', type: 'uint96' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalEta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposals',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'address', type: 'address' },
      { name: 'eta', internalType: 'uint256', type: 'uint256' },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'forVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'againstVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'canceled', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'queue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'queue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumDenominator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setProposalThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newVotingDelay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotingDelay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotingPeriod',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timelock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateQuorumNumerator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newTimelock',
        internalType: 'contract TimelockController',
        type: 'address',
      },
    ],
    name: 'updateTimelock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MemberRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const memberRegistryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_introduction', internalType: 'string', type: 'string' },
      { name: '_skills', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_skill', internalType: 'string', type: 'string' }],
    name: 'addSkill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_addr', internalType: 'address', type: 'address' }],
    name: 'deleteMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllMembers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_addr', internalType: 'address', type: 'address' }],
    name: 'getMember',
    outputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string[]', type: 'string[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    name: 'removeSkill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_introduction', internalType: 'string', type: 'string' }],
    name: 'updateIntroduction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_index', internalType: 'uint256', type: 'uint256' },
      { name: '_skill', internalType: 'string', type: 'string' },
    ],
    name: 'updateSkill',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PjDAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pjDaoABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_description', internalType: 'string', type: 'string' },
      {
        name: '_badgeNftContractAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_pjImageUri', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'issueId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'title', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'status',
        internalType: 'enum PjDAO.IssueStatus',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'createdBlockAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssueAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'issueId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'memberAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'likeCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'IssueLiked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'status',
        internalType: 'enum PjDAO.IssueStatus',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'doneBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssueStatusChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'memberAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'role',
        internalType: 'enum PjDAO.PjRole',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'memberAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxMemberAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MvpNFTMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'memberAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'role',
        internalType: 'enum PjDAO.PjRole',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'NFTMinted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINT_AMOUNT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINT_PERIOD',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RECENT_ISSUE_PERIOD',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_title', internalType: 'string', type: 'string' },
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_creator', internalType: 'address', type: 'address' },
    ],
    name: 'addIssue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_issueId', internalType: 'uint256', type: 'uint256' },
      { name: '_liker', internalType: 'address', type: 'address' },
    ],
    name: 'addLike',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_memberAddress', internalType: 'address', type: 'address' },
      { name: '_role', internalType: 'enum PjDAO.PjRole', type: 'uint8' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'badgeNftContractAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_issueId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_status',
        internalType: 'enum PjDAO.IssueStatus',
        type: 'uint8',
      },
    ],
    name: 'changeIssueStatus',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllMembers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_id', internalType: 'uint256', type: 'uint256' }],
    name: 'getIssueInfo',
    outputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'enum PjDAO.IssueStatus', type: 'uint8' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getIssueList',
    outputs: [
      { name: '', internalType: 'string[]', type: 'string[]' },
      { name: '', internalType: 'string[]', type: 'string[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_memberAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getLikeCountWithinBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRecentMvpAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum PjDAO.PjRole', type: 'uint8' },
    ],
    name: 'getTokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'issueCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'issueId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'issues',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'title', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      { name: 'creator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'enum PjDAO.IssueStatus', type: 'uint8' },
      { name: 'createdBlockAt', internalType: 'uint256', type: 'uint256' },
      { name: 'closedBlockAt', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'members',
    outputs: [
      { name: 'role', internalType: 'enum PjDAO.PjRole', type: 'uint8' },
      {
        name: 'info',
        internalType: 'struct PjDAO.ActivityInfo',
        type: 'tuple',
        components: [
          {
            name: 'joinedOrLastMintedBlockAt',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'mintMvpNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_targetAddress', internalType: 'address', type: 'address' },
      { name: '_role', internalType: 'enum PjDAO.PjRole', type: 'uint8' },
    ],
    name: 'mintNft',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'mvpAddressHistory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mvpBadgeTokenUri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pjImageUri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_memberAddress', internalType: 'address', type: 'address' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_role', internalType: 'enum PjDAO.PjRole', type: 'uint8' },
      { name: 'tokenURI', internalType: 'string', type: 'string' },
    ],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'enum PjDAO.PjRole', type: 'uint8' }],
    name: 'tokenURIs',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PjDAOFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pjDaoFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_memberNftContractAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_badgeNftContractAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pjDAO',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PjDAOCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allPjDAOs',
    outputs: [
      { name: 'pjDAO', internalType: 'address', type: 'address' },
      { name: 'creator', internalType: 'address', type: 'address' },
      { name: 'timeLockController', internalType: 'address', type: 'address' },
      { name: 'pjGovernor', internalType: 'address', type: 'address' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      { name: 'pjImageUri', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'badgeNftContractAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'createPjDAO',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllPjDAOs',
    outputs: [
      {
        name: '',
        internalType: 'struct PjDAOFactory.PjDAOInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'pjDAO', internalType: 'address', type: 'address' },
          { name: 'creator', internalType: 'address', type: 'address' },
          {
            name: 'timeLockController',
            internalType: 'address',
            type: 'address',
          },
          { name: 'pjGovernor', internalType: 'address', type: 'address' },
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'pjImageUri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPjImageUris',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRandomPjImageUri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'memberNftContractAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'removePjImageUri',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setPjImageUri',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PjGovernor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pjGovernorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'contract IVotes', type: 'address' },
      {
        name: '_timelock',
        internalType: 'contract TimelockController',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'eta', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldQuorumNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newQuorumNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'QuorumNumeratorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldTimelock',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newTimelock',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TimelockChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldVotingDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotingDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingDelaySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldVotingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingPeriodSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getActions',
    outputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'voter', internalType: 'address', type: 'address' },
    ],
    name: 'getReceipt',
    outputs: [
      {
        name: '',
        internalType: 'struct IGovernorCompatibilityBravo.Receipt',
        type: 'tuple',
        components: [
          { name: 'hasVoted', internalType: 'bool', type: 'bool' },
          { name: 'support', internalType: 'uint8', type: 'uint8' },
          { name: 'votes', internalType: 'uint96', type: 'uint96' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalEta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposals',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'address', type: 'address' },
      { name: 'eta', internalType: 'uint256', type: 'uint256' },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'forVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'againstVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'canceled', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'queue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'queue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumDenominator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setProposalThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newVotingDelay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotingDelay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotingPeriod',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timelock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateQuorumNumerator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newTimelock',
        internalType: 'contract TimelockController',
        type: 'address',
      },
    ],
    name: 'updateTimelock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Governor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernorABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TimelockController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const timelockControllerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'minDelay', internalType: 'uint256', type: 'uint256' },
      { name: 'proposers', internalType: 'address[]', type: 'address[]' },
      { name: 'executors', internalType: 'address[]', type: 'address[]' },
      { name: 'admin', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'predecessor',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'delay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CallScheduled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'Cancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MinDelayChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CANCELLER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXECUTOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PROPOSER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TIMELOCK_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
      { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'payloads', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'executeBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinDelay',
    outputs: [{ name: 'duration', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashOperation',
    outputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'payloads', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashOperationBatch',
    outputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isOperation',
    outputs: [{ name: 'registered', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isOperationDone',
    outputs: [{ name: 'done', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isOperationPending',
    outputs: [{ name: 'pending', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isOperationReady',
    outputs: [{ name: 'ready', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'delay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'schedule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'payloads', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'predecessor', internalType: 'bytes32', type: 'bytes32' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'delay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'scheduleBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newDelay', internalType: 'uint256', type: 'uint256' }],
    name: 'updateDelay',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorCompatibilityBravo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorCompatibilityBravoABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'eta', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getActions',
    outputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'voter', internalType: 'address', type: 'address' },
    ],
    name: 'getReceipt',
    outputs: [
      {
        name: '',
        internalType: 'struct IGovernorCompatibilityBravo.Receipt',
        type: 'tuple',
        components: [
          { name: 'hasVoted', internalType: 'bool', type: 'bool' },
          { name: 'support', internalType: 'uint8', type: 'uint8' },
          { name: 'votes', internalType: 'uint96', type: 'uint96' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalEta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposals',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'address', type: 'address' },
      { name: 'eta', internalType: 'uint256', type: 'uint256' },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'forVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'againstVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'canceled', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'queue',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'queue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timelock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernorCompatibilityBravo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernorCompatibilityBravoABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getActions',
    outputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'voter', internalType: 'address', type: 'address' },
    ],
    name: 'getReceipt',
    outputs: [
      {
        name: '',
        internalType: 'struct IGovernorCompatibilityBravo.Receipt',
        type: 'tuple',
        components: [
          { name: 'hasVoted', internalType: 'bool', type: 'bool' },
          { name: 'support', internalType: 'uint8', type: 'uint8' },
          { name: 'votes', internalType: 'uint96', type: 'uint96' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'proposals',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'proposer', internalType: 'address', type: 'address' },
      { name: 'eta', internalType: 'uint256', type: 'uint256' },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'forVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'againstVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'canceled', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signatures', internalType: 'string[]', type: 'string[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'queue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorSettingsABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldVotingDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotingDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingDelaySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldVotingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotingPeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingPeriodSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newProposalThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setProposalThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newVotingDelay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotingDelay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotingPeriod',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorTimelockControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorTimelockControlABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'eta', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldTimelock',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newTimelock',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TimelockChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalEta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'queue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timelock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newTimelock',
        internalType: 'contract TimelockController',
        type: 'address',
      },
    ],
    name: 'updateTimelock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorVotesABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernorTimelock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernorTimelockABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'eta', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalEta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'queue',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'timelock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorVotesQuorumFraction
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorVotesQuorumFractionABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'signatures',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldQuorumNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newQuorumNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'QuorumNumeratorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'weight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumDenominator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateQuorumNumerator',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const votesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DoubleEndedQueue
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const doubleEndedQueueABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  { type: 'error', inputs: [], name: 'OutOfBounds' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721VotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link administerNftABI}__.
 */
export function useAdministerNft(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: administerNftABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__.
 */
export function useAdministerNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof administerNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useAdministerNftDomainSeparator<
  TSelectData = ReadContractResult<typeof administerNftABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof administerNftABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useAdministerNftBalanceOf<
  TSelectData = ReadContractResult<typeof administerNftABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"delegates"`.
 */
export function useAdministerNftDelegates<
  TSelectData = ReadContractResult<typeof administerNftABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'delegates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"getApproved"`.
 */
export function useAdministerNftGetApproved<
  TSelectData = ReadContractResult<typeof administerNftABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useAdministerNftGetPastTotalSupply<
  TSelectData = ReadContractResult<
    typeof administerNftABI,
    'getPastTotalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof administerNftABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useAdministerNftGetPastVotes<
  TSelectData = ReadContractResult<typeof administerNftABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'getPastVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'getPastVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"getVotes"`.
 */
export function useAdministerNftGetVotes<
  TSelectData = ReadContractResult<typeof administerNftABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useAdministerNftIsApprovedForAll<
  TSelectData = ReadContractResult<typeof administerNftABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof administerNftABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"name"`.
 */
export function useAdministerNftName<
  TSelectData = ReadContractResult<typeof administerNftABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"nonces"`.
 */
export function useAdministerNftNonces<
  TSelectData = ReadContractResult<typeof administerNftABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"owner"`.
 */
export function useAdministerNftOwner<
  TSelectData = ReadContractResult<typeof administerNftABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useAdministerNftOwnerOf<
  TSelectData = ReadContractResult<typeof administerNftABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAdministerNftSupportsInterface<
  TSelectData = ReadContractResult<
    typeof administerNftABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof administerNftABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"symbol"`.
 */
export function useAdministerNftSymbol<
  TSelectData = ReadContractResult<typeof administerNftABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useAdministerNftTokenByIndex<
  TSelectData = ReadContractResult<typeof administerNftABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'tokenByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useAdministerNftTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<
    typeof administerNftABI,
    'tokenOfOwnerByIndex'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof administerNftABI,
      'tokenOfOwnerByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useAdministerNftTokenUri<
  TSelectData = ReadContractResult<typeof administerNftABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof administerNftABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useAdministerNftTotalSupply<
  TSelectData = ReadContractResult<typeof administerNftABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof administerNftABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: administerNftABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof administerNftABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__.
 */
export function useAdministerNftWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof administerNftABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof administerNftABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, TFunctionName>({
    abi: administerNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"approve"`.
 */
export function useAdministerNftApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof administerNftABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof administerNftABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'approve'>({
    abi: administerNftABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"burn"`.
 */
export function useAdministerNftBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof administerNftABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof administerNftABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'burn'>({
    abi: administerNftABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"delegate"`.
 */
export function useAdministerNftDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof administerNftABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof administerNftABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'delegate'>({
    abi: administerNftABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useAdministerNftDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof administerNftABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof administerNftABI,
        'delegateBySig'
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'delegateBySig'>({
    abi: administerNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAdministerNftRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof administerNftABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof administerNftABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'renounceOwnership'>({
    abi: administerNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function useAdministerNftSafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof administerNftABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof administerNftABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'safeMint'>({
    abi: administerNftABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useAdministerNftSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof administerNftABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof administerNftABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'safeTransferFrom'>({
    abi: administerNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useAdministerNftSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof administerNftABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof administerNftABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'setApprovalForAll'>({
    abi: administerNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useAdministerNftTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof administerNftABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof administerNftABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'transferFrom'>({
    abi: administerNftABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAdministerNftTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof administerNftABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof administerNftABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof administerNftABI, 'transferOwnership'>({
    abi: administerNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__.
 */
export function usePrepareAdministerNftWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareAdministerNftApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareAdministerNftBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareAdministerNftDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareAdministerNftDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAdministerNftRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof administerNftABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareAdministerNftSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareAdministerNftSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof administerNftABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareAdministerNftSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof administerNftABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareAdministerNftTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof administerNftABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link administerNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAdministerNftTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof administerNftABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: administerNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof administerNftABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__.
 */
export function useAdministerNftEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__ and `eventName` set to `"Approval"`.
 */
export function useAdministerNftApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useAdministerNftApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useAdministerNftDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useAdministerNftDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAdministerNftOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link administerNftABI}__ and `eventName` set to `"Transfer"`.
 */
export function useAdministerNftTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof administerNftABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: administerNftABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof administerNftABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link badgeNftABI}__.
 */
export function useBadgeNft(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: badgeNftABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__.
 */
export function useBadgeNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof badgeNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useBadgeNftDomainSeparator<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof badgeNftABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBadgeNftBalanceOf<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"delegates"`.
 */
export function useBadgeNftDelegates<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'delegates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"getApproved"`.
 */
export function useBadgeNftGetApproved<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useBadgeNftGetPastTotalSupply<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'getPastTotalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof badgeNftABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof badgeNftABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useBadgeNftGetPastVotes<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'getPastVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'getPastVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"getVotes"`.
 */
export function useBadgeNftGetVotes<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useBadgeNftIsApprovedForAll<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof badgeNftABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"name"`.
 */
export function useBadgeNftName<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"nonces"`.
 */
export function useBadgeNftNonces<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"owner"`.
 */
export function useBadgeNftOwner<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useBadgeNftOwnerOf<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBadgeNftSupportsInterface<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof badgeNftABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"symbol"`.
 */
export function useBadgeNftSymbol<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useBadgeNftTokenByIndex<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'tokenByIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useBadgeNftTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'tokenOfOwnerByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof badgeNftABI,
      'tokenOfOwnerByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof badgeNftABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useBadgeNftTokenUri<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBadgeNftTotalSupply<
  TSelectData = ReadContractResult<typeof badgeNftABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof badgeNftABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: badgeNftABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof badgeNftABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__.
 */
export function useBadgeNftWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof badgeNftABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, TFunctionName>({
    abi: badgeNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"approve"`.
 */
export function useBadgeNftApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'approve'>({
    abi: badgeNftABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"burn"`.
 */
export function useBadgeNftBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'burn'>({
    abi: badgeNftABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"delegate"`.
 */
export function useBadgeNftDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'delegate'>({
    abi: badgeNftABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useBadgeNftDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'delegateBySig'>({
    abi: badgeNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBadgeNftRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof badgeNftABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'renounceOwnership'>({
    abi: badgeNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"safeBatchMint"`.
 */
export function useBadgeNftSafeBatchMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'safeBatchMint'>['abi'],
        'safeBatchMint'
      > & { functionName?: 'safeBatchMint' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'safeBatchMint'> & {
        abi?: never
        functionName?: 'safeBatchMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'safeBatchMint'>({
    abi: badgeNftABI,
    functionName: 'safeBatchMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function useBadgeNftSafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'safeMint'>({
    abi: badgeNftABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useBadgeNftSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof badgeNftABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'safeTransferFrom'>({
    abi: badgeNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useBadgeNftSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof badgeNftABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'setApprovalForAll'>({
    abi: badgeNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBadgeNftTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badgeNftABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'transferFrom'>({
    abi: badgeNftABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBadgeNftTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof badgeNftABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof badgeNftABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badgeNftABI, 'transferOwnership'>({
    abi: badgeNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__.
 */
export function usePrepareBadgeNftWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBadgeNftApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareBadgeNftBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareBadgeNftDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareBadgeNftDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBadgeNftRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"safeBatchMint"`.
 */
export function usePrepareBadgeNftSafeBatchMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'safeBatchMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'safeBatchMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'safeBatchMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareBadgeNftSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareBadgeNftSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareBadgeNftSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBadgeNftTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badgeNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBadgeNftTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof badgeNftABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: badgeNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badgeNftABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__.
 */
export function useBadgeNftEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__ and `eventName` set to `"Approval"`.
 */
export function useBadgeNftApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useBadgeNftApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useBadgeNftDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useBadgeNftDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBadgeNftOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badgeNftABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBadgeNftTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof badgeNftABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: badgeNftABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof badgeNftABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link memberNftABI}__.
 */
export function useMemberNft(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: memberNftABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__.
 */
export function useMemberNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof memberNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMemberNftDomainSeparator<
  TSelectData = ReadContractResult<typeof memberNftABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof memberNftABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMemberNftBalanceOf<
  TSelectData = ReadContractResult<typeof memberNftABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"delegates"`.
 */
export function useMemberNftDelegates<
  TSelectData = ReadContractResult<typeof memberNftABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'delegates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"getApproved"`.
 */
export function useMemberNftGetApproved<
  TSelectData = ReadContractResult<typeof memberNftABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useMemberNftGetPastTotalSupply<
  TSelectData = ReadContractResult<typeof memberNftABI, 'getPastTotalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof memberNftABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof memberNftABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useMemberNftGetPastVotes<
  TSelectData = ReadContractResult<typeof memberNftABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'getPastVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'getPastVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"getVotes"`.
 */
export function useMemberNftGetVotes<
  TSelectData = ReadContractResult<typeof memberNftABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMemberNftIsApprovedForAll<
  TSelectData = ReadContractResult<typeof memberNftABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof memberNftABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"name"`.
 */
export function useMemberNftName<
  TSelectData = ReadContractResult<typeof memberNftABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"nonces"`.
 */
export function useMemberNftNonces<
  TSelectData = ReadContractResult<typeof memberNftABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"owner"`.
 */
export function useMemberNftOwner<
  TSelectData = ReadContractResult<typeof memberNftABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useMemberNftOwnerOf<
  TSelectData = ReadContractResult<typeof memberNftABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMemberNftSupportsInterface<
  TSelectData = ReadContractResult<typeof memberNftABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof memberNftABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof memberNftABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"symbol"`.
 */
export function useMemberNftSymbol<
  TSelectData = ReadContractResult<typeof memberNftABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useMemberNftTokenByIndex<
  TSelectData = ReadContractResult<typeof memberNftABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'tokenByIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useMemberNftTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<typeof memberNftABI, 'tokenOfOwnerByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof memberNftABI,
      'tokenOfOwnerByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof memberNftABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useMemberNftTokenUri<
  TSelectData = ReadContractResult<typeof memberNftABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMemberNftTotalSupply<
  TSelectData = ReadContractResult<typeof memberNftABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberNftABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberNftABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof memberNftABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__.
 */
export function useMemberNftWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof memberNftABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, TFunctionName>({
    abi: memberNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"approve"`.
 */
export function useMemberNftApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'approve'>({
    abi: memberNftABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"burn"`.
 */
export function useMemberNftBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'burn'>({
    abi: memberNftABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"delegate"`.
 */
export function useMemberNftDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'delegate'>({
    abi: memberNftABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useMemberNftDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'delegateBySig'>({
    abi: memberNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMemberNftRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberNftABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof memberNftABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'renounceOwnership'>({
    abi: memberNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function useMemberNftSafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'safeMint'>({
    abi: memberNftABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMemberNftSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberNftABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'safeTransferFrom'>({
    abi: memberNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMemberNftSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberNftABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof memberNftABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'setApprovalForAll'>({
    abi: memberNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMemberNftTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberNftABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof memberNftABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'transferFrom'>({
    abi: memberNftABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMemberNftTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberNftABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof memberNftABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberNftABI, 'transferOwnership'>({
    abi: memberNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__.
 */
export function usePrepareMemberNftWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMemberNftApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMemberNftBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareMemberNftDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareMemberNftDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMemberNftRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareMemberNftSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMemberNftSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMemberNftSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMemberNftTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMemberNftTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberNftABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberNftABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__.
 */
export function useMemberNftEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__ and `eventName` set to `"Approval"`.
 */
export function useMemberNftApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMemberNftApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useMemberNftDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useMemberNftDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMemberNftOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberNftABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMemberNftTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof memberNftABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: memberNftABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof memberNftABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link coreGovernorABI}__.
 */
export function useCoreGovernor(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: coreGovernorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__.
 */
export function useCoreGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof coreGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useCoreGovernorBallotTypehash<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'BALLOT_TYPEHASH'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useCoreGovernorCountingMode<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'COUNTING_MODE'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'COUNTING_MODE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useCoreGovernorExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof coreGovernorABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"getActions"`.
 */
export function useCoreGovernorGetActions<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'getActions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'getActions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'getActions',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'getActions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"getReceipt"`.
 */
export function useCoreGovernorGetReceipt<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'getReceipt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'getReceipt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'getReceipt',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'getReceipt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"getVotes"`.
 */
export function useCoreGovernorGetVotes<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useCoreGovernorGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof coreGovernorABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useCoreGovernorHasVoted<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'hasVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useCoreGovernorHashProposal<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'hashProposal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"name"`.
 */
export function useCoreGovernorName<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useCoreGovernorProposalDeadline<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'proposalDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"proposalEta"`.
 */
export function useCoreGovernorProposalEta<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'proposalEta'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'proposalEta', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'proposalEta',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'proposalEta',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useCoreGovernorProposalSnapshot<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'proposalSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useCoreGovernorProposalThreshold<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'proposalThreshold'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"proposals"`.
 */
export function useCoreGovernorProposals<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'proposals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'proposals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'proposals',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'proposals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"quorum"`.
 */
export function useCoreGovernorQuorum<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"quorumDenominator"`.
 */
export function useCoreGovernorQuorumDenominator<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'quorumDenominator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'quorumDenominator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'quorumDenominator',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'quorumDenominator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"quorumNumerator"`.
 */
export function useCoreGovernorQuorumNumerator<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'quorumNumerator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'quorumNumerator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'quorumNumerator',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'quorumNumerator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"quorumVotes"`.
 */
export function useCoreGovernorQuorumVotes<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'quorumVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'quorumVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'quorumVotes',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'quorumVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"state"`.
 */
export function useCoreGovernorState<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCoreGovernorSupportsInterface<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof coreGovernorABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"timelock"`.
 */
export function useCoreGovernorTimelock<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'timelock'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'timelock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'timelock',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'timelock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"token"`.
 */
export function useCoreGovernorToken<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'token'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'token', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'token', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"version"`.
 */
export function useCoreGovernorVersion<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof coreGovernorABI, 'version', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useCoreGovernorVotingDelay<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'votingDelay', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useCoreGovernorVotingPeriod<
  TSelectData = ReadContractResult<typeof coreGovernorABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<typeof coreGovernorABI, 'votingPeriod', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: coreGovernorABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof coreGovernorABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__.
 */
export function useCoreGovernorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, TFunctionName>({
    abi: coreGovernorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"cancel"`.
 */
export function useCoreGovernorCancel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, 'cancel'>['abi'],
        'cancel'
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'cancel'> & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'cancel'>({
    abi: coreGovernorABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function useCoreGovernorCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'castVote'>({
    abi: coreGovernorABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useCoreGovernorCastVoteBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'castVoteBySig'> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'castVoteBySig'>({
    abi: coreGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useCoreGovernorCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'castVoteWithReason'>({
    abi: coreGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useCoreGovernorCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof coreGovernorABI,
    'castVoteWithReasonAndParams'
  >({
    abi: coreGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useCoreGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof coreGovernorABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: coreGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function useCoreGovernorExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'execute'>({
    abi: coreGovernorABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useCoreGovernorOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof coreGovernorABI,
    'onERC1155BatchReceived'
  >({
    abi: coreGovernorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useCoreGovernorOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'onERC1155Received'>({
    abi: coreGovernorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useCoreGovernorOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'onERC721Received'>({
    abi: coreGovernorABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function useCoreGovernorPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, 'propose'>['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'propose'>({
    abi: coreGovernorABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"queue"`.
 */
export function useCoreGovernorQueue<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, 'queue'>['abi'],
        'queue'
      > & { functionName?: 'queue' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'queue'> & {
        abi?: never
        functionName?: 'queue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'queue'>({
    abi: coreGovernorABI,
    functionName: 'queue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"relay"`.
 */
export function useCoreGovernorRelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof coreGovernorABI, 'relay'>['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<TMode, typeof coreGovernorABI, 'relay'> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'relay'>({
    abi: coreGovernorABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function useCoreGovernorSetProposalThreshold<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'setProposalThreshold'
        >['abi'],
        'setProposalThreshold'
      > & { functionName?: 'setProposalThreshold' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'setProposalThreshold'
      > & {
        abi?: never
        functionName?: 'setProposalThreshold'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof coreGovernorABI,
    'setProposalThreshold'
  >({
    abi: coreGovernorABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function useCoreGovernorSetVotingDelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'setVotingDelay'
        >['abi'],
        'setVotingDelay'
      > & { functionName?: 'setVotingDelay' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'setVotingDelay'
      > & {
        abi?: never
        functionName?: 'setVotingDelay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'setVotingDelay'>({
    abi: coreGovernorABI,
    functionName: 'setVotingDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function useCoreGovernorSetVotingPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'setVotingPeriod'
        >['abi'],
        'setVotingPeriod'
      > & { functionName?: 'setVotingPeriod' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'setVotingPeriod'
      > & {
        abi?: never
        functionName?: 'setVotingPeriod'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'setVotingPeriod'>({
    abi: coreGovernorABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function useCoreGovernorUpdateQuorumNumerator<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'updateQuorumNumerator'
        >['abi'],
        'updateQuorumNumerator'
      > & { functionName?: 'updateQuorumNumerator' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'updateQuorumNumerator'
      > & {
        abi?: never
        functionName?: 'updateQuorumNumerator'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof coreGovernorABI,
    'updateQuorumNumerator'
  >({
    abi: coreGovernorABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"updateTimelock"`.
 */
export function useCoreGovernorUpdateTimelock<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof coreGovernorABI,
          'updateTimelock'
        >['abi'],
        'updateTimelock'
      > & { functionName?: 'updateTimelock' }
    : UseContractWriteConfig<
        TMode,
        typeof coreGovernorABI,
        'updateTimelock'
      > & {
        abi?: never
        functionName?: 'updateTimelock'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof coreGovernorABI, 'updateTimelock'>({
    abi: coreGovernorABI,
    functionName: 'updateTimelock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__.
 */
export function usePrepareCoreGovernorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"cancel"`.
 */
export function usePrepareCoreGovernorCancel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'cancel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'cancel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareCoreGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareCoreGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareCoreGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareCoreGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof coreGovernorABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareCoreGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof coreGovernorABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareCoreGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareCoreGovernorOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof coreGovernorABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareCoreGovernorOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareCoreGovernorOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareCoreGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"queue"`.
 */
export function usePrepareCoreGovernorQueue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'queue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'queue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'queue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareCoreGovernorRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'relay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function usePrepareCoreGovernorSetProposalThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof coreGovernorABI,
      'setProposalThreshold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'setProposalThreshold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function usePrepareCoreGovernorSetVotingDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'setVotingDelay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'setVotingDelay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'setVotingDelay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function usePrepareCoreGovernorSetVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'setVotingPeriod'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'setVotingPeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function usePrepareCoreGovernorUpdateQuorumNumerator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof coreGovernorABI,
      'updateQuorumNumerator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof coreGovernorABI,
    'updateQuorumNumerator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coreGovernorABI}__ and `functionName` set to `"updateTimelock"`.
 */
export function usePrepareCoreGovernorUpdateTimelock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coreGovernorABI, 'updateTimelock'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: coreGovernorABI,
    functionName: 'updateTimelock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coreGovernorABI, 'updateTimelock'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__.
 */
export function useCoreGovernorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useCoreGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useCoreGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useCoreGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"ProposalQueued"`.
 */
export function useCoreGovernorProposalQueuedEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'ProposalQueued'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'ProposalQueued',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'ProposalQueued'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"ProposalThresholdSet"`.
 */
export function useCoreGovernorProposalThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'ProposalThresholdSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'ProposalThresholdSet',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'ProposalThresholdSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"QuorumNumeratorUpdated"`.
 */
export function useCoreGovernorQuorumNumeratorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'QuorumNumeratorUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'QuorumNumeratorUpdated',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'QuorumNumeratorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"TimelockChange"`.
 */
export function useCoreGovernorTimelockChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'TimelockChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'TimelockChange',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'TimelockChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useCoreGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useCoreGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"VotingDelaySet"`.
 */
export function useCoreGovernorVotingDelaySetEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'VotingDelaySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'VotingDelaySet',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'VotingDelaySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coreGovernorABI}__ and `eventName` set to `"VotingPeriodSet"`.
 */
export function useCoreGovernorVotingPeriodSetEvent(
  config: Omit<
    UseContractEventConfig<typeof coreGovernorABI, 'VotingPeriodSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: coreGovernorABI,
    eventName: 'VotingPeriodSet',
    ...config,
  } as UseContractEventConfig<typeof coreGovernorABI, 'VotingPeriodSet'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function useMemberRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: memberRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function useMemberRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof memberRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberRegistryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: memberRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof memberRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"getAllMembers"`.
 */
export function useMemberRegistryGetAllMembers<
  TSelectData = ReadContractResult<typeof memberRegistryABI, 'getAllMembers'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof memberRegistryABI,
      'getAllMembers',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberRegistryABI,
    functionName: 'getAllMembers',
    ...config,
  } as UseContractReadConfig<
    typeof memberRegistryABI,
    'getAllMembers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"getMember"`.
 */
export function useMemberRegistryGetMember<
  TSelectData = ReadContractResult<typeof memberRegistryABI, 'getMember'>,
>(
  config: Omit<
    UseContractReadConfig<typeof memberRegistryABI, 'getMember', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: memberRegistryABI,
    functionName: 'getMember',
    ...config,
  } as UseContractReadConfig<
    typeof memberRegistryABI,
    'getMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function useMemberRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberRegistryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof memberRegistryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberRegistryABI, TFunctionName>({
    abi: memberRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"addMember"`.
 */
export function useMemberRegistryAddMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberRegistryABI,
          'addMember'
        >['abi'],
        'addMember'
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<TMode, typeof memberRegistryABI, 'addMember'> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberRegistryABI, 'addMember'>({
    abi: memberRegistryABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"addSkill"`.
 */
export function useMemberRegistryAddSkill<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof memberRegistryABI, 'addSkill'>['abi'],
        'addSkill'
      > & { functionName?: 'addSkill' }
    : UseContractWriteConfig<TMode, typeof memberRegistryABI, 'addSkill'> & {
        abi?: never
        functionName?: 'addSkill'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberRegistryABI, 'addSkill'>({
    abi: memberRegistryABI,
    functionName: 'addSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"deleteMember"`.
 */
export function useMemberRegistryDeleteMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberRegistryABI,
          'deleteMember'
        >['abi'],
        'deleteMember'
      > & { functionName?: 'deleteMember' }
    : UseContractWriteConfig<
        TMode,
        typeof memberRegistryABI,
        'deleteMember'
      > & {
        abi?: never
        functionName?: 'deleteMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberRegistryABI, 'deleteMember'>({
    abi: memberRegistryABI,
    functionName: 'deleteMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"removeSkill"`.
 */
export function useMemberRegistryRemoveSkill<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberRegistryABI,
          'removeSkill'
        >['abi'],
        'removeSkill'
      > & { functionName?: 'removeSkill' }
    : UseContractWriteConfig<TMode, typeof memberRegistryABI, 'removeSkill'> & {
        abi?: never
        functionName?: 'removeSkill'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberRegistryABI, 'removeSkill'>({
    abi: memberRegistryABI,
    functionName: 'removeSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"updateIntroduction"`.
 */
export function useMemberRegistryUpdateIntroduction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberRegistryABI,
          'updateIntroduction'
        >['abi'],
        'updateIntroduction'
      > & { functionName?: 'updateIntroduction' }
    : UseContractWriteConfig<
        TMode,
        typeof memberRegistryABI,
        'updateIntroduction'
      > & {
        abi?: never
        functionName?: 'updateIntroduction'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof memberRegistryABI,
    'updateIntroduction'
  >({
    abi: memberRegistryABI,
    functionName: 'updateIntroduction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"updateSkill"`.
 */
export function useMemberRegistryUpdateSkill<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof memberRegistryABI,
          'updateSkill'
        >['abi'],
        'updateSkill'
      > & { functionName?: 'updateSkill' }
    : UseContractWriteConfig<TMode, typeof memberRegistryABI, 'updateSkill'> & {
        abi?: never
        functionName?: 'updateSkill'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof memberRegistryABI, 'updateSkill'>({
    abi: memberRegistryABI,
    functionName: 'updateSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function usePrepareMemberRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareMemberRegistryAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberRegistryABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberRegistryABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"addSkill"`.
 */
export function usePrepareMemberRegistryAddSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberRegistryABI, 'addSkill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'addSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberRegistryABI, 'addSkill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"deleteMember"`.
 */
export function usePrepareMemberRegistryDeleteMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberRegistryABI, 'deleteMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'deleteMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberRegistryABI, 'deleteMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"removeSkill"`.
 */
export function usePrepareMemberRegistryRemoveSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberRegistryABI, 'removeSkill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'removeSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberRegistryABI, 'removeSkill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"updateIntroduction"`.
 */
export function usePrepareMemberRegistryUpdateIntroduction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof memberRegistryABI,
      'updateIntroduction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'updateIntroduction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof memberRegistryABI,
    'updateIntroduction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"updateSkill"`.
 */
export function usePrepareMemberRegistryUpdateSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof memberRegistryABI, 'updateSkill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'updateSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof memberRegistryABI, 'updateSkill'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pjDaoABI}__.
 */
export function usePjDao(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pjDaoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__.
 */
export function usePjDaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pjDaoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: pjDaoABI, ...config } as UseContractReadConfig<
    typeof pjDaoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"MINT_AMOUNT"`.
 */
export function usePjDaoMintAmount<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'MINT_AMOUNT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'MINT_AMOUNT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'MINT_AMOUNT',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'MINT_AMOUNT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"MINT_PERIOD"`.
 */
export function usePjDaoMintPeriod<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'MINT_PERIOD'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'MINT_PERIOD', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'MINT_PERIOD',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'MINT_PERIOD', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"RECENT_ISSUE_PERIOD"`.
 */
export function usePjDaoRecentIssuePeriod<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'RECENT_ISSUE_PERIOD'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'RECENT_ISSUE_PERIOD', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'RECENT_ISSUE_PERIOD',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoABI,
    'RECENT_ISSUE_PERIOD',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"badgeNftContractAddress"`.
 */
export function usePjDaoBadgeNftContractAddress<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'badgeNftContractAddress'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjDaoABI,
      'badgeNftContractAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'badgeNftContractAddress',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoABI,
    'badgeNftContractAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"description"`.
 */
export function usePjDaoDescription<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'description'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'description', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'description',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'description', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"getAllMembers"`.
 */
export function usePjDaoGetAllMembers<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'getAllMembers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'getAllMembers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'getAllMembers',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'getAllMembers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"getIssueInfo"`.
 */
export function usePjDaoGetIssueInfo<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'getIssueInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'getIssueInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'getIssueInfo',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'getIssueInfo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"getIssueList"`.
 */
export function usePjDaoGetIssueList<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'getIssueList'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'getIssueList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'getIssueList',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'getIssueList', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"getLikeCountWithinBlock"`.
 */
export function usePjDaoGetLikeCountWithinBlock<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'getLikeCountWithinBlock'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjDaoABI,
      'getLikeCountWithinBlock',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'getLikeCountWithinBlock',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoABI,
    'getLikeCountWithinBlock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"getRecentMvpAddress"`.
 */
export function usePjDaoGetRecentMvpAddress<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'getRecentMvpAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'getRecentMvpAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'getRecentMvpAddress',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoABI,
    'getRecentMvpAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"getTokenURI"`.
 */
export function usePjDaoGetTokenUri<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'getTokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'getTokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'getTokenURI',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'getTokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"issueCount"`.
 */
export function usePjDaoIssueCount<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'issueCount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'issueCount', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'issueCount',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'issueCount', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"issueId"`.
 */
export function usePjDaoIssueId<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'issueId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'issueId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'issueId',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'issueId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"issues"`.
 */
export function usePjDaoIssues<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'issues'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'issues', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'issues',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'issues', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"members"`.
 */
export function usePjDaoMembers<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'members'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'members', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'members',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'members', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"mvpAddressHistory"`.
 */
export function usePjDaoMvpAddressHistory<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'mvpAddressHistory'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'mvpAddressHistory', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'mvpAddressHistory',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'mvpAddressHistory', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"mvpBadgeTokenUri"`.
 */
export function usePjDaoMvpBadgeTokenUri<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'mvpBadgeTokenUri'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'mvpBadgeTokenUri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'mvpBadgeTokenUri',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'mvpBadgeTokenUri', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"name"`.
 */
export function usePjDaoName<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"owner"`.
 */
export function usePjDaoOwner<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"pjImageUri"`.
 */
export function usePjDaoPjImageUri<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'pjImageUri'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'pjImageUri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'pjImageUri',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'pjImageUri', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"tokenURIs"`.
 */
export function usePjDaoTokenUrIs<
  TSelectData = ReadContractResult<typeof pjDaoABI, 'tokenURIs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoABI, 'tokenURIs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoABI,
    functionName: 'tokenURIs',
    ...config,
  } as UseContractReadConfig<typeof pjDaoABI, 'tokenURIs', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__.
 */
export function usePjDaoWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pjDaoABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, TFunctionName>({
    abi: pjDaoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"addIssue"`.
 */
export function usePjDaoAddIssue<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'addIssue'>['abi'],
        'addIssue'
      > & { functionName?: 'addIssue' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'addIssue'> & {
        abi?: never
        functionName?: 'addIssue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'addIssue'>({
    abi: pjDaoABI,
    functionName: 'addIssue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"addLike"`.
 */
export function usePjDaoAddLike<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'addLike'>['abi'],
        'addLike'
      > & { functionName?: 'addLike' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'addLike'> & {
        abi?: never
        functionName?: 'addLike'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'addLike'>({
    abi: pjDaoABI,
    functionName: 'addLike',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"addMember"`.
 */
export function usePjDaoAddMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'addMember'>['abi'],
        'addMember'
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'addMember'> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'addMember'>({
    abi: pjDaoABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"changeIssueStatus"`.
 */
export function usePjDaoChangeIssueStatus<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'changeIssueStatus'>['abi'],
        'changeIssueStatus'
      > & { functionName?: 'changeIssueStatus' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'changeIssueStatus'> & {
        abi?: never
        functionName?: 'changeIssueStatus'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'changeIssueStatus'>({
    abi: pjDaoABI,
    functionName: 'changeIssueStatus',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"mintMvpNft"`.
 */
export function usePjDaoMintMvpNft<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'mintMvpNft'>['abi'],
        'mintMvpNft'
      > & { functionName?: 'mintMvpNft' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'mintMvpNft'> & {
        abi?: never
        functionName?: 'mintMvpNft'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'mintMvpNft'>({
    abi: pjDaoABI,
    functionName: 'mintMvpNft',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"mintNft"`.
 */
export function usePjDaoMintNft<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'mintNft'>['abi'],
        'mintNft'
      > & { functionName?: 'mintNft' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'mintNft'> & {
        abi?: never
        functionName?: 'mintNft'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'mintNft'>({
    abi: pjDaoABI,
    functionName: 'mintNft',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePjDaoRemoveMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'removeMember'>['abi'],
        'removeMember'
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'removeMember'> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'removeMember'>({
    abi: pjDaoABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePjDaoSetTokenUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoABI, 'setTokenURI'>['abi'],
        'setTokenURI'
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<TMode, typeof pjDaoABI, 'setTokenURI'> & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoABI, 'setTokenURI'>({
    abi: pjDaoABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__.
 */
export function usePreparePjDaoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"addIssue"`.
 */
export function usePreparePjDaoAddIssue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'addIssue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'addIssue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'addIssue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"addLike"`.
 */
export function usePreparePjDaoAddLike(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'addLike'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'addLike',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'addLike'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"addMember"`.
 */
export function usePreparePjDaoAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"changeIssueStatus"`.
 */
export function usePreparePjDaoChangeIssueStatus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'changeIssueStatus'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'changeIssueStatus',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'changeIssueStatus'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"mintMvpNft"`.
 */
export function usePreparePjDaoMintMvpNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'mintMvpNft'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'mintMvpNft',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'mintMvpNft'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"mintNft"`.
 */
export function usePreparePjDaoMintNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'mintNft'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'mintNft',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'mintNft'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePreparePjDaoRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePreparePjDaoSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoABI, 'setTokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoABI, 'setTokenURI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__.
 */
export function usePjDaoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"IssueAdded"`.
 */
export function usePjDaoIssueAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'IssueAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'IssueAdded',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'IssueAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"IssueLiked"`.
 */
export function usePjDaoIssueLikedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'IssueLiked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'IssueLiked',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'IssueLiked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"IssueStatusChanged"`.
 */
export function usePjDaoIssueStatusChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'IssueStatusChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'IssueStatusChanged',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'IssueStatusChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function usePjDaoMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function usePjDaoMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"MvpNFTMinted"`.
 */
export function usePjDaoMvpNftMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'MvpNFTMinted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'MvpNFTMinted',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'MvpNFTMinted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoABI}__ and `eventName` set to `"NFTMinted"`.
 */
export function usePjDaoNftMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoABI, 'NFTMinted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoABI,
    eventName: 'NFTMinted',
    ...config,
  } as UseContractEventConfig<typeof pjDaoABI, 'NFTMinted'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pjDaoFactoryABI}__.
 */
export function usePjDaoFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pjDaoFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__.
 */
export function usePjDaoFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pjDaoFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoFactoryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"allPjDAOs"`.
 */
export function usePjDaoFactoryAllPjDaOs<
  TSelectData = ReadContractResult<typeof pjDaoFactoryABI, 'allPjDAOs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoFactoryABI, 'allPjDAOs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    functionName: 'allPjDAOs',
    ...config,
  } as UseContractReadConfig<typeof pjDaoFactoryABI, 'allPjDAOs', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"badgeNftContractAddress"`.
 */
export function usePjDaoFactoryBadgeNftContractAddress<
  TSelectData = ReadContractResult<
    typeof pjDaoFactoryABI,
    'badgeNftContractAddress'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjDaoFactoryABI,
      'badgeNftContractAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    functionName: 'badgeNftContractAddress',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoFactoryABI,
    'badgeNftContractAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"getAllPjDAOs"`.
 */
export function usePjDaoFactoryGetAllPjDaOs<
  TSelectData = ReadContractResult<typeof pjDaoFactoryABI, 'getAllPjDAOs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjDaoFactoryABI, 'getAllPjDAOs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    functionName: 'getAllPjDAOs',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoFactoryABI,
    'getAllPjDAOs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"getPjImageUris"`.
 */
export function usePjDaoFactoryGetPjImageUris<
  TSelectData = ReadContractResult<typeof pjDaoFactoryABI, 'getPjImageUris'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjDaoFactoryABI,
      'getPjImageUris',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    functionName: 'getPjImageUris',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoFactoryABI,
    'getPjImageUris',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"getRandomPjImageUri"`.
 */
export function usePjDaoFactoryGetRandomPjImageUri<
  TSelectData = ReadContractResult<
    typeof pjDaoFactoryABI,
    'getRandomPjImageUri'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjDaoFactoryABI,
      'getRandomPjImageUri',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    functionName: 'getRandomPjImageUri',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoFactoryABI,
    'getRandomPjImageUri',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"memberNftContractAddress"`.
 */
export function usePjDaoFactoryMemberNftContractAddress<
  TSelectData = ReadContractResult<
    typeof pjDaoFactoryABI,
    'memberNftContractAddress'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjDaoFactoryABI,
      'memberNftContractAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjDaoFactoryABI,
    functionName: 'memberNftContractAddress',
    ...config,
  } as UseContractReadConfig<
    typeof pjDaoFactoryABI,
    'memberNftContractAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__.
 */
export function usePjDaoFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjDaoFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pjDaoFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoFactoryABI, TFunctionName>({
    abi: pjDaoFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"createPjDAO"`.
 */
export function usePjDaoFactoryCreatePjDao<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjDaoFactoryABI,
          'createPjDAO'
        >['abi'],
        'createPjDAO'
      > & { functionName?: 'createPjDAO' }
    : UseContractWriteConfig<TMode, typeof pjDaoFactoryABI, 'createPjDAO'> & {
        abi?: never
        functionName?: 'createPjDAO'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoFactoryABI, 'createPjDAO'>({
    abi: pjDaoFactoryABI,
    functionName: 'createPjDAO',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"removePjImageUri"`.
 */
export function usePjDaoFactoryRemovePjImageUri<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjDaoFactoryABI,
          'removePjImageUri'
        >['abi'],
        'removePjImageUri'
      > & { functionName?: 'removePjImageUri' }
    : UseContractWriteConfig<
        TMode,
        typeof pjDaoFactoryABI,
        'removePjImageUri'
      > & {
        abi?: never
        functionName?: 'removePjImageUri'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoFactoryABI, 'removePjImageUri'>({
    abi: pjDaoFactoryABI,
    functionName: 'removePjImageUri',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"setPjImageUri"`.
 */
export function usePjDaoFactorySetPjImageUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjDaoFactoryABI,
          'setPjImageUri'
        >['abi'],
        'setPjImageUri'
      > & { functionName?: 'setPjImageUri' }
    : UseContractWriteConfig<TMode, typeof pjDaoFactoryABI, 'setPjImageUri'> & {
        abi?: never
        functionName?: 'setPjImageUri'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjDaoFactoryABI, 'setPjImageUri'>({
    abi: pjDaoFactoryABI,
    functionName: 'setPjImageUri',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__.
 */
export function usePreparePjDaoFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"createPjDAO"`.
 */
export function usePreparePjDaoFactoryCreatePjDao(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, 'createPjDAO'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoFactoryABI,
    functionName: 'createPjDAO',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, 'createPjDAO'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"removePjImageUri"`.
 */
export function usePreparePjDaoFactoryRemovePjImageUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, 'removePjImageUri'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoFactoryABI,
    functionName: 'removePjImageUri',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjDaoFactoryABI,
    'removePjImageUri'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `functionName` set to `"setPjImageUri"`.
 */
export function usePreparePjDaoFactorySetPjImageUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, 'setPjImageUri'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjDaoFactoryABI,
    functionName: 'setPjImageUri',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjDaoFactoryABI, 'setPjImageUri'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoFactoryABI}__.
 */
export function usePjDaoFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pjDaoFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof pjDaoFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjDaoFactoryABI}__ and `eventName` set to `"PjDAOCreated"`.
 */
export function usePjDaoFactoryPjDaoCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjDaoFactoryABI, 'PjDAOCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjDaoFactoryABI,
    eventName: 'PjDAOCreated',
    ...config,
  } as UseContractEventConfig<typeof pjDaoFactoryABI, 'PjDAOCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pjGovernorABI}__.
 */
export function usePjGovernor(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pjGovernorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__.
 */
export function usePjGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pjGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function usePjGovernorBallotTypehash<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'BALLOT_TYPEHASH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'BALLOT_TYPEHASH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function usePjGovernorCountingMode<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'COUNTING_MODE'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'COUNTING_MODE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function usePjGovernorExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof pjGovernorABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"getActions"`.
 */
export function usePjGovernorGetActions<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'getActions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'getActions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'getActions',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'getActions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"getReceipt"`.
 */
export function usePjGovernorGetReceipt<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'getReceipt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'getReceipt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'getReceipt',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'getReceipt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"getVotes"`.
 */
export function usePjGovernorGetVotes<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function usePjGovernorGetVotesWithParams<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'getVotesWithParams'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"hasVoted"`.
 */
export function usePjGovernorHasVoted<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'hasVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"hashProposal"`.
 */
export function usePjGovernorHashProposal<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'hashProposal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'hashProposal', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"name"`.
 */
export function usePjGovernorName<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function usePjGovernorProposalDeadline<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'proposalDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"proposalEta"`.
 */
export function usePjGovernorProposalEta<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'proposalEta'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'proposalEta', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'proposalEta',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'proposalEta', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function usePjGovernorProposalSnapshot<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'proposalSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function usePjGovernorProposalThreshold<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'proposalThreshold'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"proposals"`.
 */
export function usePjGovernorProposals<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'proposals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'proposals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'proposals',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'proposals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"quorum"`.
 */
export function usePjGovernorQuorum<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"quorumDenominator"`.
 */
export function usePjGovernorQuorumDenominator<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'quorumDenominator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'quorumDenominator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'quorumDenominator',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'quorumDenominator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"quorumNumerator"`.
 */
export function usePjGovernorQuorumNumerator<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'quorumNumerator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'quorumNumerator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'quorumNumerator',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'quorumNumerator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"quorumVotes"`.
 */
export function usePjGovernorQuorumVotes<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'quorumVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'quorumVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'quorumVotes',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'quorumVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"state"`.
 */
export function usePjGovernorState<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePjGovernorSupportsInterface<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pjGovernorABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof pjGovernorABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"timelock"`.
 */
export function usePjGovernorTimelock<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'timelock'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'timelock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'timelock',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'timelock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"token"`.
 */
export function usePjGovernorToken<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'token'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'token', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'token', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"version"`.
 */
export function usePjGovernorVersion<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'version', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"votingDelay"`.
 */
export function usePjGovernorVotingDelay<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'votingDelay', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'votingDelay', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function usePjGovernorVotingPeriod<
  TSelectData = ReadContractResult<typeof pjGovernorABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pjGovernorABI, 'votingPeriod', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pjGovernorABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof pjGovernorABI, 'votingPeriod', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__.
 */
export function usePjGovernorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, TFunctionName>({
    abi: pjGovernorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"cancel"`.
 */
export function usePjGovernorCancel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, 'cancel'>['abi'],
        'cancel'
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'cancel'> & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'cancel'>({
    abi: pjGovernorABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePjGovernorCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'castVote'>({
    abi: pjGovernorABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePjGovernorCastVoteBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'castVoteBySig'> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'castVoteBySig'>({
    abi: pjGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePjGovernorCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'castVoteWithReason'>({
    abi: pjGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePjGovernorCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pjGovernorABI,
    'castVoteWithReasonAndParams'
  >({
    abi: pjGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePjGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pjGovernorABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: pjGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function usePjGovernorExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'execute'>({
    abi: pjGovernorABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePjGovernorOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pjGovernorABI,
    'onERC1155BatchReceived'
  >({
    abi: pjGovernorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePjGovernorOnErc1155Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'onERC1155Received'>({
    abi: pjGovernorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePjGovernorOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'onERC721Received'>({
    abi: pjGovernorABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function usePjGovernorPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, 'propose'>['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'propose'>({
    abi: pjGovernorABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"queue"`.
 */
export function usePjGovernorQueue<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, 'queue'>['abi'],
        'queue'
      > & { functionName?: 'queue' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'queue'> & {
        abi?: never
        functionName?: 'queue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'queue'>({
    abi: pjGovernorABI,
    functionName: 'queue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"relay"`.
 */
export function usePjGovernorRelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pjGovernorABI, 'relay'>['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'relay'> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'relay'>({
    abi: pjGovernorABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function usePjGovernorSetProposalThreshold<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'setProposalThreshold'
        >['abi'],
        'setProposalThreshold'
      > & { functionName?: 'setProposalThreshold' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'setProposalThreshold'
      > & {
        abi?: never
        functionName?: 'setProposalThreshold'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'setProposalThreshold'>({
    abi: pjGovernorABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function usePjGovernorSetVotingDelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'setVotingDelay'
        >['abi'],
        'setVotingDelay'
      > & { functionName?: 'setVotingDelay' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'setVotingDelay'> & {
        abi?: never
        functionName?: 'setVotingDelay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'setVotingDelay'>({
    abi: pjGovernorABI,
    functionName: 'setVotingDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function usePjGovernorSetVotingPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'setVotingPeriod'
        >['abi'],
        'setVotingPeriod'
      > & { functionName?: 'setVotingPeriod' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'setVotingPeriod'> & {
        abi?: never
        functionName?: 'setVotingPeriod'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'setVotingPeriod'>({
    abi: pjGovernorABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function usePjGovernorUpdateQuorumNumerator<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'updateQuorumNumerator'
        >['abi'],
        'updateQuorumNumerator'
      > & { functionName?: 'updateQuorumNumerator' }
    : UseContractWriteConfig<
        TMode,
        typeof pjGovernorABI,
        'updateQuorumNumerator'
      > & {
        abi?: never
        functionName?: 'updateQuorumNumerator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'updateQuorumNumerator'>(
    {
      abi: pjGovernorABI,
      functionName: 'updateQuorumNumerator',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"updateTimelock"`.
 */
export function usePjGovernorUpdateTimelock<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pjGovernorABI,
          'updateTimelock'
        >['abi'],
        'updateTimelock'
      > & { functionName?: 'updateTimelock' }
    : UseContractWriteConfig<TMode, typeof pjGovernorABI, 'updateTimelock'> & {
        abi?: never
        functionName?: 'updateTimelock'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pjGovernorABI, 'updateTimelock'>({
    abi: pjGovernorABI,
    functionName: 'updateTimelock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__.
 */
export function usePreparePjGovernorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"cancel"`.
 */
export function usePreparePjGovernorCancel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'cancel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'cancel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePreparePjGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePreparePjGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePreparePjGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjGovernorABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePreparePjGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pjGovernorABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjGovernorABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePreparePjGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pjGovernorABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjGovernorABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function usePreparePjGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePreparePjGovernorOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pjGovernorABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjGovernorABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePreparePjGovernorOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePreparePjGovernorOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function usePreparePjGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"queue"`.
 */
export function usePreparePjGovernorQueue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'queue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'queue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'queue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"relay"`.
 */
export function usePreparePjGovernorRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'relay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function usePreparePjGovernorSetProposalThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'setProposalThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjGovernorABI,
    'setProposalThreshold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function usePreparePjGovernorSetVotingDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'setVotingDelay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'setVotingDelay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'setVotingDelay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function usePreparePjGovernorSetVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'setVotingPeriod'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'setVotingPeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function usePreparePjGovernorUpdateQuorumNumerator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pjGovernorABI,
      'updateQuorumNumerator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pjGovernorABI,
    'updateQuorumNumerator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pjGovernorABI}__ and `functionName` set to `"updateTimelock"`.
 */
export function usePreparePjGovernorUpdateTimelock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pjGovernorABI, 'updateTimelock'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pjGovernorABI,
    functionName: 'updateTimelock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pjGovernorABI, 'updateTimelock'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__.
 */
export function usePjGovernorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function usePjGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function usePjGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function usePjGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"ProposalQueued"`.
 */
export function usePjGovernorProposalQueuedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'ProposalQueued'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'ProposalQueued',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'ProposalQueued'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"ProposalThresholdSet"`.
 */
export function usePjGovernorProposalThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'ProposalThresholdSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'ProposalThresholdSet',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'ProposalThresholdSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"QuorumNumeratorUpdated"`.
 */
export function usePjGovernorQuorumNumeratorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'QuorumNumeratorUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'QuorumNumeratorUpdated',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'QuorumNumeratorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"TimelockChange"`.
 */
export function usePjGovernorTimelockChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'TimelockChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'TimelockChange',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'TimelockChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"VoteCast"`.
 */
export function usePjGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function usePjGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"VotingDelaySet"`.
 */
export function usePjGovernorVotingDelaySetEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'VotingDelaySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'VotingDelaySet',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'VotingDelaySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pjGovernorABI}__ and `eventName` set to `"VotingPeriodSet"`.
 */
export function usePjGovernorVotingPeriodSetEvent(
  config: Omit<
    UseContractEventConfig<typeof pjGovernorABI, 'VotingPeriodSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pjGovernorABI,
    eventName: 'VotingPeriodSet',
    ...config,
  } as UseContractEventConfig<typeof pjGovernorABI, 'VotingPeriodSet'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TSelectData = ReadContractResult<typeof accessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'grantRole'>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'renounceRole'>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'revokeRole'>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'grantRole'>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'renounceRole'>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'revokeRole'>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TSelectData = ReadContractResult<typeof ownableABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernor(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorBallotTypehash<
  TSelectData = ReadContractResult<typeof governorABI, 'BALLOT_TYPEHASH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'BALLOT_TYPEHASH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorCountingMode<
  TSelectData = ReadContractResult<typeof governorABI, 'COUNTING_MODE'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'COUNTING_MODE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'COUNTING_MODE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorGetVotes<
  TSelectData = ReadContractResult<typeof governorABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorGetVotesWithParams<
  TSelectData = ReadContractResult<typeof governorABI, 'getVotesWithParams'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorHasVoted<
  TSelectData = ReadContractResult<typeof governorABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'hasVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorHashProposal<
  TSelectData = ReadContractResult<typeof governorABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'hashProposal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'hashProposal', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorName<
  TSelectData = ReadContractResult<typeof governorABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorProposalDeadline<
  TSelectData = ReadContractResult<typeof governorABI, 'proposalDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'proposalDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorProposalSnapshot<
  TSelectData = ReadContractResult<typeof governorABI, 'proposalSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'proposalSnapshot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorProposalThreshold<
  TSelectData = ReadContractResult<typeof governorABI, 'proposalThreshold'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'proposalThreshold', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorQuorum<
  TSelectData = ReadContractResult<typeof governorABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorState<
  TSelectData = ReadContractResult<typeof governorABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorSupportsInterface<
  TSelectData = ReadContractResult<typeof governorABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governorABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorVersion<
  TSelectData = ReadContractResult<typeof governorABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'version', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorVotingDelay<
  TSelectData = ReadContractResult<typeof governorABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'votingDelay', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'votingDelay', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorVotingPeriod<
  TSelectData = ReadContractResult<typeof governorABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, 'votingPeriod', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof governorABI, 'votingPeriod', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof governorABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, TFunctionName>({
    abi: governorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'castVote'>({
    abi: governorABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorCastVoteBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorABI, 'castVoteBySig'>['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'castVoteBySig'> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'castVoteBySig'>({
    abi: governorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorCastVoteWithReason<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof governorABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'castVoteWithReason'>({
    abi: governorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof governorABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorABI,
    'castVoteWithReasonAndParams'
  >({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'execute'>({
    abi: governorABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof governorABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'onERC1155BatchReceived'>({
    abi: governorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorOnErc1155Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'onERC1155Received'> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'onERC1155Received'>({
    abi: governorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'onERC721Received'>({
    abi: governorABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorABI, 'propose'>['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'propose'>({
    abi: governorABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorRelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorABI, 'relay'>['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<TMode, typeof governorABI, 'relay'> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorABI, 'relay'>({
    abi: governorABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__.
 */
export function usePrepareGovernorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'relay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    ...config,
  } as UseContractEventConfig<typeof governorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernor(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGovernorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useIGovernorCountingMode<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'COUNTING_MODE'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'COUNTING_MODE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'COUNTING_MODE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIGovernorGetVotes<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useIGovernorGetVotesWithParams<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'getVotesWithParams'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useIGovernorHasVoted<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'hasVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useIGovernorHashProposal<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'hashProposal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'hashProposal', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"name"`.
 */
export function useIGovernorName<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useIGovernorProposalDeadline<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'proposalDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'proposalDeadline', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useIGovernorProposalSnapshot<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'proposalSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'proposalSnapshot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"quorum"`.
 */
export function useIGovernorQuorum<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"state"`.
 */
export function useIGovernorState<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIGovernorSupportsInterface<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"version"`.
 */
export function useIGovernorVersion<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'version', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useIGovernorVotingDelay<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'votingDelay', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'votingDelay', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useIGovernorVotingPeriod<
  TSelectData = ReadContractResult<typeof iGovernorABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, 'votingPeriod', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, 'votingPeriod', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iGovernorABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorABI, TFunctionName>({
    abi: iGovernorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function useIGovernorCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof iGovernorABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorABI, 'castVote'>({
    abi: iGovernorABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useIGovernorCastVoteBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorABI, 'castVoteBySig'>['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<TMode, typeof iGovernorABI, 'castVoteBySig'> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorABI, 'castVoteBySig'>({
    abi: iGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useIGovernorCastVoteWithReason<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorABI, 'castVoteWithReason'>({
    abi: iGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useIGovernorCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorABI,
    'castVoteWithReasonAndParams'
  >({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useIGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function useIGovernorExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof iGovernorABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorABI, 'execute'>({
    abi: iGovernorABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function useIGovernorPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorABI, 'propose'>['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof iGovernorABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorABI, 'propose'>({
    abi: iGovernorABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function usePrepareIGovernorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareIGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareIGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareIGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareIGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareIGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'propose'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useIGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useIGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link timelockControllerABI}__.
 */
export function useTimelockController(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: timelockControllerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__.
 */
export function useTimelockControllerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof timelockControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"CANCELLER_ROLE"`.
 */
export function useTimelockControllerCancellerRole<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'CANCELLER_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'CANCELLER_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'CANCELLER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'CANCELLER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useTimelockControllerDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"EXECUTOR_ROLE"`.
 */
export function useTimelockControllerExecutorRole<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'EXECUTOR_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'EXECUTOR_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'EXECUTOR_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'EXECUTOR_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"PROPOSER_ROLE"`.
 */
export function useTimelockControllerProposerRole<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'PROPOSER_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'PROPOSER_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'PROPOSER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'PROPOSER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"TIMELOCK_ADMIN_ROLE"`.
 */
export function useTimelockControllerTimelockAdminRole<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'TIMELOCK_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'TIMELOCK_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'TIMELOCK_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'TIMELOCK_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"getMinDelay"`.
 */
export function useTimelockControllerGetMinDelay<
  TSelectData = ReadContractResult<typeof timelockControllerABI, 'getMinDelay'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'getMinDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'getMinDelay',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'getMinDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useTimelockControllerGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"getTimestamp"`.
 */
export function useTimelockControllerGetTimestamp<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'getTimestamp'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'getTimestamp',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'getTimestamp',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'getTimestamp',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"hasRole"`.
 */
export function useTimelockControllerHasRole<
  TSelectData = ReadContractResult<typeof timelockControllerABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof timelockControllerABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"hashOperation"`.
 */
export function useTimelockControllerHashOperation<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'hashOperation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'hashOperation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'hashOperation',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'hashOperation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"hashOperationBatch"`.
 */
export function useTimelockControllerHashOperationBatch<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'hashOperationBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'hashOperationBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'hashOperationBatch',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'hashOperationBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"isOperation"`.
 */
export function useTimelockControllerIsOperation<
  TSelectData = ReadContractResult<typeof timelockControllerABI, 'isOperation'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'isOperation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'isOperation',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'isOperation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"isOperationDone"`.
 */
export function useTimelockControllerIsOperationDone<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'isOperationDone'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'isOperationDone',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'isOperationDone',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'isOperationDone',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"isOperationPending"`.
 */
export function useTimelockControllerIsOperationPending<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'isOperationPending'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'isOperationPending',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'isOperationPending',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'isOperationPending',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"isOperationReady"`.
 */
export function useTimelockControllerIsOperationReady<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'isOperationReady'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'isOperationReady',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'isOperationReady',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'isOperationReady',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTimelockControllerSupportsInterface<
  TSelectData = ReadContractResult<
    typeof timelockControllerABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof timelockControllerABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: timelockControllerABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof timelockControllerABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__.
 */
export function useTimelockControllerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof timelockControllerABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, TFunctionName>({
    abi: timelockControllerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"cancel"`.
 */
export function useTimelockControllerCancel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'cancel'
        >['abi'],
        'cancel'
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<TMode, typeof timelockControllerABI, 'cancel'> & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'cancel'>({
    abi: timelockControllerABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"execute"`.
 */
export function useTimelockControllerExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof timelockControllerABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'execute'>({
    abi: timelockControllerABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"executeBatch"`.
 */
export function useTimelockControllerExecuteBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'executeBatch'
        >['abi'],
        'executeBatch'
      > & { functionName?: 'executeBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'executeBatch'
      > & {
        abi?: never
        functionName?: 'executeBatch'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'executeBatch'>({
    abi: timelockControllerABI,
    functionName: 'executeBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"grantRole"`.
 */
export function useTimelockControllerGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'grantRole'>({
    abi: timelockControllerABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useTimelockControllerOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof timelockControllerABI,
    'onERC1155BatchReceived'
  >({
    abi: timelockControllerABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useTimelockControllerOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof timelockControllerABI,
    'onERC1155Received'
  >({
    abi: timelockControllerABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useTimelockControllerOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof timelockControllerABI,
    'onERC721Received'
  >({
    abi: timelockControllerABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useTimelockControllerRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'renounceRole'>({
    abi: timelockControllerABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useTimelockControllerRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'revokeRole'>({
    abi: timelockControllerABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"schedule"`.
 */
export function useTimelockControllerSchedule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'schedule'
        >['abi'],
        'schedule'
      > & { functionName?: 'schedule' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'schedule'
      > & {
        abi?: never
        functionName?: 'schedule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'schedule'>({
    abi: timelockControllerABI,
    functionName: 'schedule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"scheduleBatch"`.
 */
export function useTimelockControllerScheduleBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'scheduleBatch'
        >['abi'],
        'scheduleBatch'
      > & { functionName?: 'scheduleBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'scheduleBatch'
      > & {
        abi?: never
        functionName?: 'scheduleBatch'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'scheduleBatch'>(
    {
      abi: timelockControllerABI,
      functionName: 'scheduleBatch',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"updateDelay"`.
 */
export function useTimelockControllerUpdateDelay<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof timelockControllerABI,
          'updateDelay'
        >['abi'],
        'updateDelay'
      > & { functionName?: 'updateDelay' }
    : UseContractWriteConfig<
        TMode,
        typeof timelockControllerABI,
        'updateDelay'
      > & {
        abi?: never
        functionName?: 'updateDelay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof timelockControllerABI, 'updateDelay'>({
    abi: timelockControllerABI,
    functionName: 'updateDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__.
 */
export function usePrepareTimelockControllerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"cancel"`.
 */
export function usePrepareTimelockControllerCancel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'cancel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof timelockControllerABI, 'cancel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareTimelockControllerExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof timelockControllerABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"executeBatch"`.
 */
export function usePrepareTimelockControllerExecuteBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'executeBatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'executeBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'executeBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareTimelockControllerGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof timelockControllerABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareTimelockControllerOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof timelockControllerABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareTimelockControllerOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof timelockControllerABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareTimelockControllerOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof timelockControllerABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareTimelockControllerRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareTimelockControllerRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"schedule"`.
 */
export function usePrepareTimelockControllerSchedule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'schedule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'schedule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof timelockControllerABI, 'schedule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"scheduleBatch"`.
 */
export function usePrepareTimelockControllerScheduleBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof timelockControllerABI,
      'scheduleBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'scheduleBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'scheduleBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link timelockControllerABI}__ and `functionName` set to `"updateDelay"`.
 */
export function usePrepareTimelockControllerUpdateDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof timelockControllerABI, 'updateDelay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: timelockControllerABI,
    functionName: 'updateDelay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof timelockControllerABI,
    'updateDelay'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__.
 */
export function useTimelockControllerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"CallExecuted"`.
 */
export function useTimelockControllerCallExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'CallExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'CallExecuted',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'CallExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"CallScheduled"`.
 */
export function useTimelockControllerCallScheduledEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'CallScheduled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'CallScheduled',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'CallScheduled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"Cancelled"`.
 */
export function useTimelockControllerCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'Cancelled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'Cancelled',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'Cancelled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"MinDelayChange"`.
 */
export function useTimelockControllerMinDelayChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'MinDelayChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'MinDelayChange',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'MinDelayChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useTimelockControllerRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useTimelockControllerRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link timelockControllerABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useTimelockControllerRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof timelockControllerABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: timelockControllerABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof timelockControllerABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governorCompatibilityBravoABI}__.
 */
export function useGovernorCompatibilityBravo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governorCompatibilityBravoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__.
 */
export function useGovernorCompatibilityBravoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorCompatibilityBravoBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorCompatibilityBravoCountingMode<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'COUNTING_MODE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorCompatibilityBravoExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"getActions"`.
 */
export function useGovernorCompatibilityBravoGetActions<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'getActions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'getActions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'getActions',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'getActions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"getReceipt"`.
 */
export function useGovernorCompatibilityBravoGetReceipt<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'getReceipt'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'getReceipt',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'getReceipt',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'getReceipt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorCompatibilityBravoGetVotes<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'getVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'getVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorCompatibilityBravoGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorCompatibilityBravoHasVoted<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'hasVoted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'hasVoted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'hasVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorCompatibilityBravoHashProposal<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'hashProposal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'hashProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorCompatibilityBravoName<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'name'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorCompatibilityBravoProposalDeadline<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'proposalDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"proposalEta"`.
 */
export function useGovernorCompatibilityBravoProposalEta<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'proposalEta'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'proposalEta',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'proposalEta',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'proposalEta',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorCompatibilityBravoProposalSnapshot<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'proposalSnapshot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorCompatibilityBravoProposalThreshold<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'proposalThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"proposals"`.
 */
export function useGovernorCompatibilityBravoProposals<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'proposals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'proposals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'proposals',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'proposals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorCompatibilityBravoQuorum<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'quorum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'quorum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'quorum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"quorumVotes"`.
 */
export function useGovernorCompatibilityBravoQuorumVotes<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'quorumVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'quorumVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'quorumVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'quorumVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorCompatibilityBravoState<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'state'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'state',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'state',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorCompatibilityBravoSupportsInterface<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"timelock"`.
 */
export function useGovernorCompatibilityBravoTimelock<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'timelock'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'timelock',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'timelock',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'timelock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorCompatibilityBravoVersion<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'version'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'version',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'version',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorCompatibilityBravoVotingDelay<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'votingDelay'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'votingDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorCompatibilityBravoVotingPeriod<
  TSelectData = ReadContractResult<
    typeof governorCompatibilityBravoABI,
    'votingPeriod'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorCompatibilityBravoABI,
      'votingPeriod',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCompatibilityBravoABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof governorCompatibilityBravoABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__.
 */
export function useGovernorCompatibilityBravoWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    TFunctionName
  >({ abi: governorCompatibilityBravoABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"cancel"`.
 */
export function useGovernorCompatibilityBravoCancel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'cancel'
        >['abi'],
        'cancel'
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'cancel'
      > & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'cancel'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorCompatibilityBravoCastVote<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'castVote'
        >['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'castVote'
      > & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'castVote'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorCompatibilityBravoCastVoteBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'castVoteBySig'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorCompatibilityBravoCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'castVoteWithReason'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorCompatibilityBravoCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'castVoteWithReasonAndParams'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorCompatibilityBravoCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorCompatibilityBravoExecute<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'execute'
      > & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'execute'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorCompatibilityBravoOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'onERC1155BatchReceived'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorCompatibilityBravoOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'onERC1155Received'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorCompatibilityBravoOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'onERC721Received'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorCompatibilityBravoPropose<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'propose'
        >['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'propose'
      > & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorCompatibilityBravoABI,
    'propose'
  >({
    abi: governorCompatibilityBravoABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"queue"`.
 */
export function useGovernorCompatibilityBravoQueue<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'queue'
        >['abi'],
        'queue'
      > & { functionName?: 'queue' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'queue'
      > & {
        abi?: never
        functionName?: 'queue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorCompatibilityBravoABI, 'queue'>(
    {
      abi: governorCompatibilityBravoABI,
      functionName: 'queue',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorCompatibilityBravoRelay<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorCompatibilityBravoABI,
          'relay'
        >['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<
        TMode,
        typeof governorCompatibilityBravoABI,
        'relay'
      > & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorCompatibilityBravoABI, 'relay'>(
    {
      abi: governorCompatibilityBravoABI,
      functionName: 'relay',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__.
 */
export function usePrepareGovernorCompatibilityBravoWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"cancel"`.
 */
export function usePrepareGovernorCompatibilityBravoCancel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'cancel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'cancel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorCompatibilityBravoCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'castVote'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'castVote'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorCompatibilityBravoCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'castVoteBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'castVoteBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorCompatibilityBravoCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorCompatibilityBravoCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorCompatibilityBravoCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorCompatibilityBravoExecute(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'execute'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'execute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorCompatibilityBravoOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorCompatibilityBravoOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorCompatibilityBravoOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorCompatibilityBravoPropose(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'propose'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'propose'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"queue"`.
 */
export function usePrepareGovernorCompatibilityBravoQueue(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'queue'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'queue',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'queue'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorCompatibilityBravoRelay(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCompatibilityBravoABI,
      'relay'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCompatibilityBravoABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCompatibilityBravoABI,
    'relay'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__.
 */
export function useGovernorCompatibilityBravoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorCompatibilityBravoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    ...config,
  } as UseContractEventConfig<typeof governorCompatibilityBravoABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorCompatibilityBravoProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorCompatibilityBravoABI,
      'ProposalCanceled'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<
    typeof governorCompatibilityBravoABI,
    'ProposalCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorCompatibilityBravoProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorCompatibilityBravoABI,
      'ProposalCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<
    typeof governorCompatibilityBravoABI,
    'ProposalCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorCompatibilityBravoProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorCompatibilityBravoABI,
      'ProposalExecuted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof governorCompatibilityBravoABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `eventName` set to `"ProposalQueued"`.
 */
export function useGovernorCompatibilityBravoProposalQueuedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorCompatibilityBravoABI,
      'ProposalQueued'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    eventName: 'ProposalQueued',
    ...config,
  } as UseContractEventConfig<
    typeof governorCompatibilityBravoABI,
    'ProposalQueued'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorCompatibilityBravoVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorCompatibilityBravoABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorCompatibilityBravoABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCompatibilityBravoABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorCompatibilityBravoVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorCompatibilityBravoABI,
      'VoteCastWithParams'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCompatibilityBravoABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<
    typeof governorCompatibilityBravoABI,
    'VoteCastWithParams'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__.
 */
export function useIGovernorCompatibilityBravo(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGovernorCompatibilityBravoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__.
 */
export function useIGovernorCompatibilityBravoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useIGovernorCompatibilityBravoCountingMode<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'COUNTING_MODE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"getActions"`.
 */
export function useIGovernorCompatibilityBravoGetActions<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'getActions'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'getActions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'getActions',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'getActions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"getReceipt"`.
 */
export function useIGovernorCompatibilityBravoGetReceipt<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'getReceipt'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'getReceipt',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'getReceipt',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'getReceipt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIGovernorCompatibilityBravoGetVotes<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'getVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'getVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useIGovernorCompatibilityBravoGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useIGovernorCompatibilityBravoHasVoted<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'hasVoted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'hasVoted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'hasVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useIGovernorCompatibilityBravoHashProposal<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'hashProposal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'hashProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"name"`.
 */
export function useIGovernorCompatibilityBravoName<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'name'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useIGovernorCompatibilityBravoProposalDeadline<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'proposalDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useIGovernorCompatibilityBravoProposalSnapshot<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'proposalSnapshot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"proposals"`.
 */
export function useIGovernorCompatibilityBravoProposals<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'proposals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'proposals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'proposals',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'proposals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"quorum"`.
 */
export function useIGovernorCompatibilityBravoQuorum<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'quorum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'quorum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'quorum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"quorumVotes"`.
 */
export function useIGovernorCompatibilityBravoQuorumVotes<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'quorumVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'quorumVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'quorumVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'quorumVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"state"`.
 */
export function useIGovernorCompatibilityBravoState<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'state'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'state',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'state',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIGovernorCompatibilityBravoSupportsInterface<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"version"`.
 */
export function useIGovernorCompatibilityBravoVersion<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'version'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'version',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'version',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useIGovernorCompatibilityBravoVotingDelay<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'votingDelay'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'votingDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useIGovernorCompatibilityBravoVotingPeriod<
  TSelectData = ReadContractResult<
    typeof iGovernorCompatibilityBravoABI,
    'votingPeriod'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorCompatibilityBravoABI,
      'votingPeriod',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorCompatibilityBravoABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__.
 */
export function useIGovernorCompatibilityBravoWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    TFunctionName
  >({ abi: iGovernorCompatibilityBravoABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"cancel"`.
 */
export function useIGovernorCompatibilityBravoCancel<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'cancel'
        >['abi'],
        'cancel'
      > & { functionName?: 'cancel' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'cancel'
      > & {
        abi?: never
        functionName?: 'cancel'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'cancel'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'cancel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVote"`.
 */
export function useIGovernorCompatibilityBravoCastVote<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'castVote'
        >['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'castVote'
      > & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'castVote'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useIGovernorCompatibilityBravoCastVoteBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'castVoteBySig'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useIGovernorCompatibilityBravoCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'castVoteWithReason'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useIGovernorCompatibilityBravoCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'castVoteWithReasonAndParams'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useIGovernorCompatibilityBravoCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"execute"`.
 */
export function useIGovernorCompatibilityBravoExecute<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'execute'
      > & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'execute'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"propose"`.
 */
export function useIGovernorCompatibilityBravoPropose<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'propose'
        >['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'propose'
      > & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'propose'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"queue"`.
 */
export function useIGovernorCompatibilityBravoQueue<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorCompatibilityBravoABI,
          'queue'
        >['abi'],
        'queue'
      > & { functionName?: 'queue' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorCompatibilityBravoABI,
        'queue'
      > & {
        abi?: never
        functionName?: 'queue'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorCompatibilityBravoABI,
    'queue'
  >({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'queue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__.
 */
export function usePrepareIGovernorCompatibilityBravoWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"cancel"`.
 */
export function usePrepareIGovernorCompatibilityBravoCancel(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'cancel'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'cancel',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'cancel'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIGovernorCompatibilityBravoCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'castVote'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'castVote'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareIGovernorCompatibilityBravoCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'castVoteBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'castVoteBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareIGovernorCompatibilityBravoCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareIGovernorCompatibilityBravoCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareIGovernorCompatibilityBravoCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIGovernorCompatibilityBravoExecute(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'execute'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'execute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareIGovernorCompatibilityBravoPropose(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'propose'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'propose'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `functionName` set to `"queue"`.
 */
export function usePrepareIGovernorCompatibilityBravoQueue(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorCompatibilityBravoABI,
      'queue'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorCompatibilityBravoABI,
    functionName: 'queue',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorCompatibilityBravoABI,
    'queue'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__.
 */
export function useIGovernorCompatibilityBravoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iGovernorCompatibilityBravoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorCompatibilityBravoABI,
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorCompatibilityBravoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useIGovernorCompatibilityBravoProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iGovernorCompatibilityBravoABI,
      'ProposalCanceled'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorCompatibilityBravoABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorCompatibilityBravoABI,
    'ProposalCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIGovernorCompatibilityBravoProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iGovernorCompatibilityBravoABI,
      'ProposalCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorCompatibilityBravoABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorCompatibilityBravoABI,
    'ProposalCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIGovernorCompatibilityBravoProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iGovernorCompatibilityBravoABI,
      'ProposalExecuted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorCompatibilityBravoABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorCompatibilityBravoABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIGovernorCompatibilityBravoVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorCompatibilityBravoABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorCompatibilityBravoABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorCompatibilityBravoABI,
    'VoteCast'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorCompatibilityBravoABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useIGovernorCompatibilityBravoVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iGovernorCompatibilityBravoABI,
      'VoteCastWithParams'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorCompatibilityBravoABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorCompatibilityBravoABI,
    'VoteCastWithParams'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettings(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governorSettingsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettingsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorSettingsBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorSettingsCountingMode<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'COUNTING_MODE'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorSettingsExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorSettingsGetVotes<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorSettingsGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorSettingsHasVoted<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'hasVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorSettingsHashProposal<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'hashProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorSettingsName<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorSettingsProposalDeadline<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'proposalDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorSettingsProposalSnapshot<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'proposalSnapshot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorSettingsProposalThreshold<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'proposalThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorSettingsQuorum<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorSettingsState<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorSettingsSupportsInterface<
  TSelectData = ReadContractResult<
    typeof governorSettingsABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorSettingsVersion<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'version',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorSettingsVotingDelay<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'votingDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorSettingsVotingPeriod<
  TSelectData = ReadContractResult<typeof governorSettingsABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorSettingsABI,
      'votingPeriod',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof governorSettingsABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettingsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorSettingsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, TFunctionName>({
    abi: governorSettingsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorSettingsCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVote'
        >['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof governorSettingsABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'castVote'>({
    abi: governorSettingsABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorSettingsCastVoteBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'castVoteBySig'>({
    abi: governorSettingsABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorSettingsCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'castVoteWithReason'
  >({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorSettingsCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'castVoteWithReasonAndParams'
  >({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorSettingsCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorSettingsExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof governorSettingsABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'execute'>({
    abi: governorSettingsABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorSettingsOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'onERC1155BatchReceived'
  >({
    abi: governorSettingsABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorSettingsOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'onERC1155Received'
  >({
    abi: governorSettingsABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorSettingsOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'onERC721Received'
  >({
    abi: governorSettingsABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorSettingsPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'propose'
        >['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof governorSettingsABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'propose'>({
    abi: governorSettingsABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorSettingsRelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorSettingsABI, 'relay'>['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<TMode, typeof governorSettingsABI, 'relay'> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'relay'>({
    abi: governorSettingsABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function useGovernorSettingsSetProposalThreshold<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'setProposalThreshold'
        >['abi'],
        'setProposalThreshold'
      > & { functionName?: 'setProposalThreshold' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'setProposalThreshold'
      > & {
        abi?: never
        functionName?: 'setProposalThreshold'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorSettingsABI,
    'setProposalThreshold'
  >({
    abi: governorSettingsABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function useGovernorSettingsSetVotingDelay<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'setVotingDelay'
        >['abi'],
        'setVotingDelay'
      > & { functionName?: 'setVotingDelay' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'setVotingDelay'
      > & {
        abi?: never
        functionName?: 'setVotingDelay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'setVotingDelay'>({
    abi: governorSettingsABI,
    functionName: 'setVotingDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function useGovernorSettingsSetVotingPeriod<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'setVotingPeriod'
        >['abi'],
        'setVotingPeriod'
      > & { functionName?: 'setVotingPeriod' }
    : UseContractWriteConfig<
        TMode,
        typeof governorSettingsABI,
        'setVotingPeriod'
      > & {
        abi?: never
        functionName?: 'setVotingPeriod'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorSettingsABI, 'setVotingPeriod'>(
    {
      abi: governorSettingsABI,
      functionName: 'setVotingPeriod',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function usePrepareGovernorSettingsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorSettingsCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorSettingsCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'castVoteBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorSettingsCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorSettingsCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorSettingsCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorSettingsExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorSettingsOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorSettingsOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorSettingsOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorSettingsPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorSettingsRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'relay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function usePrepareGovernorSettingsSetProposalThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'setProposalThreshold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'setProposalThreshold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function usePrepareGovernorSettingsSetVotingDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setVotingDelay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'setVotingDelay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'setVotingDelay'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function usePrepareGovernorSettingsSetVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorSettingsABI,
      'setVotingPeriod'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'setVotingPeriod'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettingsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorSettingsProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorSettingsProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorSettingsProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalThresholdSet"`.
 */
export function useGovernorSettingsProposalThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalThresholdSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalThresholdSet',
    ...config,
  } as UseContractEventConfig<
    typeof governorSettingsABI,
    'ProposalThresholdSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorSettingsVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorSettingsVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VotingDelaySet"`.
 */
export function useGovernorSettingsVotingDelaySetEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VotingDelaySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VotingDelaySet',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VotingDelaySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VotingPeriodSet"`.
 */
export function useGovernorSettingsVotingPeriodSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VotingPeriodSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VotingPeriodSet',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VotingPeriodSet'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governorTimelockControlABI}__.
 */
export function useGovernorTimelockControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governorTimelockControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__.
 */
export function useGovernorTimelockControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorTimelockControlBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorTimelockControlCountingMode<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'COUNTING_MODE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorTimelockControlExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorTimelockControlGetVotes<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'getVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'getVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorTimelockControlGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorTimelockControlHasVoted<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'hasVoted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'hasVoted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'hasVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorTimelockControlHashProposal<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'hashProposal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'hashProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorTimelockControlName<
  TSelectData = ReadContractResult<typeof governorTimelockControlABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorTimelockControlProposalDeadline<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'proposalDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"proposalEta"`.
 */
export function useGovernorTimelockControlProposalEta<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'proposalEta'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'proposalEta',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'proposalEta',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'proposalEta',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorTimelockControlProposalSnapshot<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'proposalSnapshot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorTimelockControlProposalThreshold<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'proposalThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorTimelockControlQuorum<
  TSelectData = ReadContractResult<typeof governorTimelockControlABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'quorum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'quorum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorTimelockControlState<
  TSelectData = ReadContractResult<typeof governorTimelockControlABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'state',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'state',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorTimelockControlSupportsInterface<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"timelock"`.
 */
export function useGovernorTimelockControlTimelock<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'timelock'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'timelock',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'timelock',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'timelock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorTimelockControlVersion<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'version'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'version',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'version',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorTimelockControlVotingDelay<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'votingDelay'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'votingDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorTimelockControlVotingPeriod<
  TSelectData = ReadContractResult<
    typeof governorTimelockControlABI,
    'votingPeriod'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorTimelockControlABI,
      'votingPeriod',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorTimelockControlABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof governorTimelockControlABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__.
 */
export function useGovernorTimelockControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    TFunctionName
  >({ abi: governorTimelockControlABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorTimelockControlCastVote<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'castVote'
        >['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'castVote'
      > & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorTimelockControlABI, 'castVote'>(
    {
      abi: governorTimelockControlABI,
      functionName: 'castVote',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorTimelockControlCastVoteBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'castVoteBySig'
  >({
    abi: governorTimelockControlABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorTimelockControlCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'castVoteWithReason'
  >({
    abi: governorTimelockControlABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorTimelockControlCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'castVoteWithReasonAndParams'
  >({
    abi: governorTimelockControlABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorTimelockControlCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: governorTimelockControlABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorTimelockControlExecute<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'execute'
      > & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorTimelockControlABI, 'execute'>({
    abi: governorTimelockControlABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorTimelockControlOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'onERC1155BatchReceived'
  >({
    abi: governorTimelockControlABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorTimelockControlOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'onERC1155Received'
  >({
    abi: governorTimelockControlABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorTimelockControlOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'onERC721Received'
  >({
    abi: governorTimelockControlABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorTimelockControlPropose<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'propose'
        >['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'propose'
      > & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorTimelockControlABI, 'propose'>({
    abi: governorTimelockControlABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"queue"`.
 */
export function useGovernorTimelockControlQueue<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'queue'
        >['abi'],
        'queue'
      > & { functionName?: 'queue' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'queue'
      > & {
        abi?: never
        functionName?: 'queue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorTimelockControlABI, 'queue'>({
    abi: governorTimelockControlABI,
    functionName: 'queue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorTimelockControlRelay<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'relay'
        >['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'relay'
      > & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorTimelockControlABI, 'relay'>({
    abi: governorTimelockControlABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"updateTimelock"`.
 */
export function useGovernorTimelockControlUpdateTimelock<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorTimelockControlABI,
          'updateTimelock'
        >['abi'],
        'updateTimelock'
      > & { functionName?: 'updateTimelock' }
    : UseContractWriteConfig<
        TMode,
        typeof governorTimelockControlABI,
        'updateTimelock'
      > & {
        abi?: never
        functionName?: 'updateTimelock'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorTimelockControlABI,
    'updateTimelock'
  >({
    abi: governorTimelockControlABI,
    functionName: 'updateTimelock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__.
 */
export function usePrepareGovernorTimelockControlWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorTimelockControlCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'castVote'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'castVote'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorTimelockControlCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'castVoteBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'castVoteBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorTimelockControlCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorTimelockControlCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorTimelockControlCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorTimelockControlExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorTimelockControlABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'execute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorTimelockControlOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorTimelockControlOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorTimelockControlOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorTimelockControlPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorTimelockControlABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'propose'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"queue"`.
 */
export function usePrepareGovernorTimelockControlQueue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorTimelockControlABI, 'queue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'queue',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'queue'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorTimelockControlRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorTimelockControlABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'relay'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorTimelockControlABI}__ and `functionName` set to `"updateTimelock"`.
 */
export function usePrepareGovernorTimelockControlUpdateTimelock(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorTimelockControlABI,
      'updateTimelock'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorTimelockControlABI,
    functionName: 'updateTimelock',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorTimelockControlABI,
    'updateTimelock'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__.
 */
export function useGovernorTimelockControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorTimelockControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    ...config,
  } as UseContractEventConfig<typeof governorTimelockControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorTimelockControlProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorTimelockControlABI,
      'ProposalCanceled'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<
    typeof governorTimelockControlABI,
    'ProposalCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorTimelockControlProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorTimelockControlABI,
      'ProposalCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<
    typeof governorTimelockControlABI,
    'ProposalCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorTimelockControlProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorTimelockControlABI,
      'ProposalExecuted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof governorTimelockControlABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"ProposalQueued"`.
 */
export function useGovernorTimelockControlProposalQueuedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorTimelockControlABI, 'ProposalQueued'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'ProposalQueued',
    ...config,
  } as UseContractEventConfig<
    typeof governorTimelockControlABI,
    'ProposalQueued'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"TimelockChange"`.
 */
export function useGovernorTimelockControlTimelockChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof governorTimelockControlABI, 'TimelockChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'TimelockChange',
    ...config,
  } as UseContractEventConfig<
    typeof governorTimelockControlABI,
    'TimelockChange'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorTimelockControlVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorTimelockControlABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorTimelockControlABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorTimelockControlABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorTimelockControlVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorTimelockControlABI,
      'VoteCastWithParams'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorTimelockControlABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<
    typeof governorTimelockControlABI,
    'VoteCastWithParams'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotes(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governorVotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesBallotTypehash<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'BALLOT_TYPEHASH'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorVotesCountingMode<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'COUNTING_MODE'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorVotesABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorVotesGetVotes<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorVotesGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof governorVotesABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorVotesHasVoted<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'hasVoted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorVotesHashProposal<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'hashProposal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorVotesName<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorVotesProposalDeadline<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'proposalDeadline'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorVotesProposalSnapshot<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'proposalSnapshot'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorVotesProposalThreshold<
  TSelectData = ReadContractResult<
    typeof governorVotesABI,
    'proposalThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorVotesQuorum<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorVotesState<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorVotesSupportsInterface<
  TSelectData = ReadContractResult<
    typeof governorVotesABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"token"`.
 */
export function useGovernorVotesToken<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'token'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'token', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'token', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorVotesVersion<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, 'version', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorVotesVotingDelay<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'votingDelay', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorVotesVotingPeriod<
  TSelectData = ReadContractResult<typeof governorVotesABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, 'votingPeriod', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorVotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof governorVotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, TFunctionName>({
    abi: governorVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorVotesCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorVotesABI, 'castVote'>['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof governorVotesABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'castVote'>({
    abi: governorVotesABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorVotesCastVoteBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'castVoteBySig'>({
    abi: governorVotesABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorVotesCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'castVoteWithReason'>(
    {
      abi: governorVotesABI,
      functionName: 'castVoteWithReason',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorVotesCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesABI,
    'castVoteWithReasonAndParams'
  >({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorVotesCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorVotesExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorVotesABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof governorVotesABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'execute'>({
    abi: governorVotesABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorVotesOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesABI,
    'onERC1155BatchReceived'
  >({
    abi: governorVotesABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorVotesOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'onERC1155Received'>({
    abi: governorVotesABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorVotesOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'onERC721Received'>({
    abi: governorVotesABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorVotesPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorVotesABI, 'propose'>['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof governorVotesABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'propose'>({
    abi: governorVotesABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorVotesRelay<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governorVotesABI, 'relay'>['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<TMode, typeof governorVotesABI, 'relay'> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governorVotesABI, 'relay'>({
    abi: governorVotesABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function usePrepareGovernorVotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorVotesCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorVotesCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorVotesCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorVotesCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorVotesCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorVotesExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorVotesOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorVotesOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorVotesOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorVotesPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorVotesRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'relay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorVotesProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorVotesProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorVotesProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorVotesVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorVotesVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGovernorTimelockABI}__.
 */
export function useIGovernorTimelock(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGovernorTimelockABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__.
 */
export function useIGovernorTimelockRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useIGovernorTimelockCountingMode<
  TSelectData = ReadContractResult<
    typeof iGovernorTimelockABI,
    'COUNTING_MODE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIGovernorTimelockGetVotes<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useIGovernorTimelockGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof iGovernorTimelockABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useIGovernorTimelockHasVoted<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'hasVoted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'hasVoted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'hasVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useIGovernorTimelockHashProposal<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'hashProposal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'hashProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"name"`.
 */
export function useIGovernorTimelockName<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof iGovernorTimelockABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useIGovernorTimelockProposalDeadline<
  TSelectData = ReadContractResult<
    typeof iGovernorTimelockABI,
    'proposalDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"proposalEta"`.
 */
export function useIGovernorTimelockProposalEta<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'proposalEta'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'proposalEta',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'proposalEta',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'proposalEta',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useIGovernorTimelockProposalSnapshot<
  TSelectData = ReadContractResult<
    typeof iGovernorTimelockABI,
    'proposalSnapshot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"quorum"`.
 */
export function useIGovernorTimelockQuorum<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'quorum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"state"`.
 */
export function useIGovernorTimelockState<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'state'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'state', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof iGovernorTimelockABI, 'state', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIGovernorTimelockSupportsInterface<
  TSelectData = ReadContractResult<
    typeof iGovernorTimelockABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"timelock"`.
 */
export function useIGovernorTimelockTimelock<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'timelock'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'timelock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'timelock',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'timelock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"version"`.
 */
export function useIGovernorTimelockVersion<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorTimelockABI, 'version', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'version',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useIGovernorTimelockVotingDelay<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'votingDelay'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'votingDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useIGovernorTimelockVotingPeriod<
  TSelectData = ReadContractResult<typeof iGovernorTimelockABI, 'votingPeriod'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGovernorTimelockABI,
      'votingPeriod',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorTimelockABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof iGovernorTimelockABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__.
 */
export function useIGovernorTimelockWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorTimelockABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorTimelockABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorTimelockABI, TFunctionName>({
    abi: iGovernorTimelockABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVote"`.
 */
export function useIGovernorTimelockCastVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'castVote'
        >['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<TMode, typeof iGovernorTimelockABI, 'castVote'> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorTimelockABI, 'castVote'>({
    abi: iGovernorTimelockABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useIGovernorTimelockCastVoteBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorTimelockABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorTimelockABI, 'castVoteBySig'>({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useIGovernorTimelockCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorTimelockABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorTimelockABI,
    'castVoteWithReason'
  >({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useIGovernorTimelockCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorTimelockABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorTimelockABI,
    'castVoteWithReasonAndParams'
  >({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useIGovernorTimelockCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernorTimelockABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernorTimelockABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"execute"`.
 */
export function useIGovernorTimelockExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof iGovernorTimelockABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorTimelockABI, 'execute'>({
    abi: iGovernorTimelockABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"propose"`.
 */
export function useIGovernorTimelockPropose<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernorTimelockABI,
          'propose'
        >['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<TMode, typeof iGovernorTimelockABI, 'propose'> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorTimelockABI, 'propose'>({
    abi: iGovernorTimelockABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"queue"`.
 */
export function useIGovernorTimelockQueue<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGovernorTimelockABI, 'queue'>['abi'],
        'queue'
      > & { functionName?: 'queue' }
    : UseContractWriteConfig<TMode, typeof iGovernorTimelockABI, 'queue'> & {
        abi?: never
        functionName?: 'queue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGovernorTimelockABI, 'queue'>({
    abi: iGovernorTimelockABI,
    functionName: 'queue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__.
 */
export function usePrepareIGovernorTimelockWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorTimelockABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIGovernorTimelockCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareIGovernorTimelockCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorTimelockABI,
    'castVoteBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareIGovernorTimelockCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorTimelockABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorTimelockABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareIGovernorTimelockCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorTimelockABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorTimelockABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareIGovernorTimelockCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernorTimelockABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernorTimelockABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIGovernorTimelockExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareIGovernorTimelockPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `functionName` set to `"queue"`.
 */
export function usePrepareIGovernorTimelockQueue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'queue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorTimelockABI,
    functionName: 'queue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorTimelockABI, 'queue'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__.
 */
export function useIGovernorTimelockEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    ...config,
  } as UseContractEventConfig<typeof iGovernorTimelockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useIGovernorTimelockProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIGovernorTimelockProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIGovernorTimelockProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `eventName` set to `"ProposalQueued"`.
 */
export function useIGovernorTimelockProposalQueuedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalQueued'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    eventName: 'ProposalQueued',
    ...config,
  } as UseContractEventConfig<typeof iGovernorTimelockABI, 'ProposalQueued'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIGovernorTimelockVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof iGovernorTimelockABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorTimelockABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useIGovernorTimelockVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorTimelockABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorTimelockABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<
    typeof iGovernorTimelockABI,
    'VoteCastWithParams'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iVotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iVotesABI, ...config } as UseContractReadConfig<
    typeof iVotesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesDelegates<
  TSelectData = ReadContractResult<typeof iVotesABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'delegates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesGetPastTotalSupply<
  TSelectData = ReadContractResult<typeof iVotesABI, 'getPastTotalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getPastTotalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesGetPastVotes<
  TSelectData = ReadContractResult<typeof iVotesABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getPastVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getPastVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesGetVotes<
  TSelectData = ReadContractResult<typeof iVotesABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iVotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, TFunctionName>({
    abi: iVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof iVotesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, 'delegate'>({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof iVotesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, 'delegateBySig'>({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function usePrepareIVotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFraction(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governorVotesQuorumFractionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFractionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesQuorumFractionBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorVotesQuorumFractionCountingMode<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'COUNTING_MODE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'COUNTING_MODE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'COUNTING_MODE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesQuorumFractionExtendedBallotTypehash<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'EXTENDED_BALLOT_TYPEHASH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'EXTENDED_BALLOT_TYPEHASH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'EXTENDED_BALLOT_TYPEHASH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorVotesQuorumFractionGetVotes<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'getVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'getVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorVotesQuorumFractionGetVotesWithParams<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'getVotesWithParams'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'getVotesWithParams',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'getVotesWithParams',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorVotesQuorumFractionHasVoted<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'hasVoted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'hasVoted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'hasVoted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorVotesQuorumFractionHashProposal<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'hashProposal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'hashProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'hashProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorVotesQuorumFractionName<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'name'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorVotesQuorumFractionProposalDeadline<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'proposalDeadline'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'proposalDeadline',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'proposalDeadline',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorVotesQuorumFractionProposalSnapshot<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'proposalSnapshot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'proposalSnapshot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'proposalSnapshot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorVotesQuorumFractionProposalThreshold<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'proposalThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'proposalThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'proposalThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorVotesQuorumFractionQuorum<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'quorum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'quorum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'quorum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"quorumDenominator"`.
 */
export function useGovernorVotesQuorumFractionQuorumDenominator<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'quorumDenominator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'quorumDenominator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'quorumDenominator',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'quorumDenominator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"quorumNumerator"`.
 */
export function useGovernorVotesQuorumFractionQuorumNumerator<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'quorumNumerator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'quorumNumerator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'quorumNumerator',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'quorumNumerator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorVotesQuorumFractionState<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'state'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'state',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'state',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorVotesQuorumFractionSupportsInterface<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"token"`.
 */
export function useGovernorVotesQuorumFractionToken<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'token'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'token',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'token',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorVotesQuorumFractionVersion<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'version'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'version',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'version',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorVotesQuorumFractionVotingDelay<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'votingDelay'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'votingDelay',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'votingDelay',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorVotesQuorumFractionVotingPeriod<
  TSelectData = ReadContractResult<
    typeof governorVotesQuorumFractionABI,
    'votingPeriod'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governorVotesQuorumFractionABI,
      'votingPeriod',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof governorVotesQuorumFractionABI,
    'votingPeriod',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFractionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    TFunctionName
  >({ abi: governorVotesQuorumFractionABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorVotesQuorumFractionCastVote<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVote'
        >['abi'],
        'castVote'
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'castVote'
      > & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'castVote'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorVotesQuorumFractionCastVoteBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteBySig'
        >['abi'],
        'castVoteBySig'
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'castVoteBySig'
      > & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'castVoteBySig'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorVotesQuorumFractionCastVoteWithReason<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteWithReason'
        >['abi'],
        'castVoteWithReason'
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'castVoteWithReason'
      > & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReason'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorVotesQuorumFractionCastVoteWithReasonAndParams<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteWithReasonAndParams'
        >['abi'],
        'castVoteWithReasonAndParams'
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'castVoteWithReasonAndParams'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParams'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorVotesQuorumFractionCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteWithReasonAndParamsBySig'
        >['abi'],
        'castVoteWithReasonAndParamsBySig'
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'castVoteWithReasonAndParamsBySig'
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParamsBySig'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorVotesQuorumFractionExecute<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'execute'
      > & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'execute'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorVotesQuorumFractionOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'onERC1155BatchReceived'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorVotesQuorumFractionOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'onERC1155Received'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorVotesQuorumFractionOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'onERC721Received'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorVotesQuorumFractionPropose<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'propose'
        >['abi'],
        'propose'
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'propose'
      > & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'propose'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorVotesQuorumFractionRelay<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'relay'
        >['abi'],
        'relay'
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'relay'
      > & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'relay'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function useGovernorVotesQuorumFractionUpdateQuorumNumerator<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'updateQuorumNumerator'
        >['abi'],
        'updateQuorumNumerator'
      > & { functionName?: 'updateQuorumNumerator' }
    : UseContractWriteConfig<
        TMode,
        typeof governorVotesQuorumFractionABI,
        'updateQuorumNumerator'
      > & {
        abi?: never
        functionName?: 'updateQuorumNumerator'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governorVotesQuorumFractionABI,
    'updateQuorumNumerator'
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function usePrepareGovernorVotesQuorumFractionWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVote'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVote'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVoteBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVoteBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVoteWithReason'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReason'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorVotesQuorumFractionExecute(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'execute'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'execute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorVotesQuorumFractionOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorVotesQuorumFractionOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorVotesQuorumFractionOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorVotesQuorumFractionPropose(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'propose'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'propose'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorVotesQuorumFractionRelay(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'relay'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'relay'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function usePrepareGovernorVotesQuorumFractionUpdateQuorumNumerator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'updateQuorumNumerator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'updateQuorumNumerator'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFractionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorVotesQuorumFractionProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorVotesQuorumFractionABI,
      'ProposalCanceled'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    'ProposalCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorVotesQuorumFractionProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorVotesQuorumFractionABI,
      'ProposalCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    'ProposalCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorVotesQuorumFractionProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorVotesQuorumFractionABI,
      'ProposalExecuted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"QuorumNumeratorUpdated"`.
 */
export function useGovernorVotesQuorumFractionQuorumNumeratorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorVotesQuorumFractionABI,
      'QuorumNumeratorUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'QuorumNumeratorUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    'QuorumNumeratorUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorVotesQuorumFractionVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    'VoteCast'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorVotesQuorumFractionVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governorVotesQuorumFractionABI,
      'VoteCastWithParams'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<
    typeof governorVotesQuorumFractionABI,
    'VoteCastWithParams'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: votesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: votesABI, ...config } as UseContractReadConfig<
    typeof votesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVotesDomainSeparator<
  TSelectData = ReadContractResult<typeof votesABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'DOMAIN_SEPARATOR', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegates"`.
 */
export function useVotesDelegates<
  TSelectData = ReadContractResult<typeof votesABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'delegates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useVotesGetPastTotalSupply<
  TSelectData = ReadContractResult<typeof votesABI, 'getPastTotalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getPastTotalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof votesABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useVotesGetPastVotes<
  TSelectData = ReadContractResult<typeof votesABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getPastVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getPastVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useVotesGetVotes<
  TSelectData = ReadContractResult<typeof votesABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"nonces"`.
 */
export function useVotesNonces<
  TSelectData = ReadContractResult<typeof votesABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof votesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, TFunctionName>({
    abi: votesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function useVotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof votesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, 'delegate'>({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useVotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof votesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, 'delegateBySig'>({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function usePrepareVotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof votesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    ...config,
  } as UseContractEventConfig<typeof votesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc1155ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ReceiverABI, TFunctionName>({
    abi: ierc1155ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function usePrepareIerc1155ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TSelectData = ReadContractResult<typeof erc721ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link doubleEndedQueueABI}__.
 */
export function useDoubleEndedQueue(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: doubleEndedQueueABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721Burnable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableBalanceOf<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableGetApproved<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721BurnableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721BurnableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableName<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableOwnerOf<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721BurnableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721BurnableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableSymbol<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableTokenUri<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, TFunctionName>({
    abi: erc721BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'approve'>({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'burn'>({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'safeTransferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'setApprovalForAll'>(
    {
      abi: erc721BurnableABI,
      functionName: 'setApprovalForAll',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721BurnableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721BurnableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'transferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BurnableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BurnableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorage(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721UriStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UriStorageBalanceOf<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UriStorageGetApproved<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UriStorageIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UriStorageName<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UriStorageOwnerOf<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UriStorageSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721UriStorageABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UriStorageSymbol<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721UriStorageABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UriStorageTokenUri<
  TSelectData = ReadContractResult<typeof erc721UriStorageABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UriStorageABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721UriStorageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, TFunctionName>({
    abi: erc721UriStorageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UriStorageApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721UriStorageABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, 'approve'>({
    abi: erc721UriStorageABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UriStorageSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageABI,
    'safeTransferFrom'
  >({
    abi: erc721UriStorageABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UriStorageSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UriStorageABI,
    'setApprovalForAll'
  >({
    abi: erc721UriStorageABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UriStorageTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UriStorageABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UriStorageABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UriStorageABI, 'transferFrom'>({
    abi: erc721UriStorageABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function usePrepareErc721UriStorageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UriStorageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UriStorageApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UriStorageSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UriStorageSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UriStorageTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UriStorageABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__.
 */
export function useErc721UriStorageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UriStorageApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UriStorageApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UriStorageTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721UriStorageABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721Enumerable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721EnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721EnumerableBalanceOf<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721EnumerableGetApproved<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721EnumerableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721EnumerableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721EnumerableName<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721EnumerableOwnerOf<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721EnumerableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721EnumerableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721EnumerableSymbol<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721EnumerableTokenByIndex<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      'tokenByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'tokenByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc721EnumerableTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<
    typeof erc721EnumerableABI,
    'tokenOfOwnerByIndex'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      'tokenOfOwnerByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721EnumerableTokenUri<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721EnumerableTotalSupply<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721EnumerableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, TFunctionName>({
    abi: erc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'approve'>({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721EnumerableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721EnumerableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721EnumerableABI,
    'safeTransferFrom'
  >({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721EnumerableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721EnumerableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721EnumerableABI,
    'setApprovalForAll'
  >({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721EnumerableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721EnumerableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'transferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function usePrepareErc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721EnumerableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721EnumerableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>(
    {
      abi: ierc721MetadataABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721Votes(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721VotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc721VotesDomainSeparator<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721VotesABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof erc721VotesABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721VotesBalanceOf<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc721VotesDelegates<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'delegates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721VotesGetApproved<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc721VotesGetPastTotalSupply<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'getPastTotalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721VotesABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721VotesABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc721VotesGetPastVotes<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getPastVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof erc721VotesABI,
    'getPastVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc721VotesGetVotes<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getVotes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721VotesIsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721VotesABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721VotesABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"name"`.
 */
export function useErc721VotesName<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc721VotesNonces<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721VotesOwnerOf<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721VotesSupportsInterface<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721VotesABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721VotesABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721VotesSymbol<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721VotesTokenUri<
  TSelectData = ReadContractResult<typeof erc721VotesABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, TFunctionName>({
    abi: erc721VotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721VotesApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'approve'>({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc721VotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'delegate'>({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc721VotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721VotesABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'delegateBySig'>({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721VotesSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721VotesABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721VotesABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'safeTransferFrom'>({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721VotesSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721VotesABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721VotesABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'setApprovalForAll'>({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721VotesTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721VotesABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'transferFrom'>({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function usePrepareErc721VotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721VotesApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc721VotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc721VotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721VotesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721VotesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721VotesABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721VotesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721VotesApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721VotesApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc721VotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc721VotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721VotesTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721Enumerable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721EnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721EnumerableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721EnumerableGetApproved<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721EnumerableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721EnumerableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721EnumerableOwnerOf<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721EnumerableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721EnumerableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIerc721EnumerableTokenByIndex<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'tokenByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'tokenByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIerc721EnumerableTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<
    typeof ierc721EnumerableABI,
    'tokenOfOwnerByIndex'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'tokenOfOwnerByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721EnumerableTotalSupply<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721EnumerableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, TFunctionName>({
    abi: ierc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'approve'>({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721EnumerableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721EnumerableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721EnumerableABI,
    'safeTransferFrom'
  >({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721EnumerableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721EnumerableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721EnumerableABI,
    'setApprovalForAll'
  >({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721EnumerableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721EnumerableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'transferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function usePrepareIerc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721EnumerableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721EnumerableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>)
}
